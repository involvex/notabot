<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="1134" failures="1" errors="0" time="20.7517645">
    <testsuite name="src/index.test.ts" timestamp="2025-07-31T16:52:10.309Z" hostname="Involvex" tests="1" failures="0" errors="0" skipped="0" time="0.0050589">
        <testcase classname="src/index.test.ts" name="placeholder tests &gt; should pass" time="0.0025401">
        </testcase>
    </testsuite>
    <testsuite name="src/config/config.test.ts" timestamp="2025-07-31T16:52:10.312Z" hostname="Involvex" tests="22" failures="0" errors="0" skipped="0" time="0.3243461">
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; initialize &gt; should throw an error if checkpointing is enabled and GitService fails" time="0.1018455">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; initialize &gt; should not throw an error if checkpointing is disabled and GitService fails" time="0.0130537">
            <system-err>
All tools temporarily disabled due to API compatibility issues

            </system-err>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshAuth &gt; should refresh auth and update config" time="0.0186719">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should store userMemory correctly" time="0.0043636">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should default userMemory to empty string if not provided" time="0.0490512">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should call setGeminiMdFilename with contextFileName if provided" time="0.0021774">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should not call setGeminiMdFilename if contextFileName is not provided" time="0.0242046">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should set default file filtering settings when not provided" time="0.0026519">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should set custom file filtering settings when provided" time="0.0061152">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should initialize WorkspaceContext with includeDirectories" time="0.0029634">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should set telemetry to true when provided as true" time="0.002108">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should set telemetry to false when provided as false" time="0.0023764">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should default telemetry to default value if not provided" time="0.0208993">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should have a getFileService method that returns FileDiscoveryService" time="0.0185833">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default telemetry target if not provided" time="0.0026095">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return provided OTLP endpoint" time="0.0176801">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP endpoint if not provided" time="0.0091878">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return provided logPrompts setting" time="0.0103507">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default logPrompts setting (true) if not provided" time="0.0034188">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default logPrompts setting (true) if telemetry object is not provided" time="0.001934">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default telemetry target if telemetry object is not provided" time="0.0024181">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP endpoint if telemetry object is not provided" time="0.0015531">
        </testcase>
    </testsuite>
    <testsuite name="src/config/flashFallback.test.ts" timestamp="2025-07-31T16:52:10.317Z" hostname="Involvex" tests="6" failures="0" errors="0" skipped="0" time="0.1351861">
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; setModel &gt; should only mark as switched if contentGeneratorConfig exists" time="0.0875838">
            <system-out>
Error reading cached Google Account: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getCachedGoogleAccount [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:62:53[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:84:19[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:23:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)
Error reading lifetime Google Accounts: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getLifetimeGoogleAccounts [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:83:51[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:85:27[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:23:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)

Error reading cached Google Account: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getCachedGoogleAccount [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:62:53[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:84:19[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:48:25
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
Error reading lifetime Google Accounts: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getLifetimeGoogleAccounts [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:83:51[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:85:27[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:48:25
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)

            </system-out>
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at readInstallationIdFromFile [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:25:71[90m)[39m
    at getInstallationId [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:43:26[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:103:36[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:23:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)

Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at readInstallationIdFromFile [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:25:71[90m)[39m
    at getInstallationId [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:43:26[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:103:36[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:48:25
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)

            </system-err>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; getModel &gt; should return contentGeneratorConfig model if available" time="0.0040858">
            <system-out>
Error reading cached Google Account: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getCachedGoogleAccount [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:62:53[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:84:19[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:23:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)
Error reading lifetime Google Accounts: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getLifetimeGoogleAccounts [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:83:51[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:85:27[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:23:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)

            </system-out>
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at readInstallationIdFromFile [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:25:71[90m)[39m
    at getInstallationId [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:43:26[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:103:36[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:23:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)

            </system-err>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; getModel &gt; should fall back to initial model if contentGeneratorConfig is not available" time="0.0083814">
            <system-out>
Error reading cached Google Account: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getCachedGoogleAccount [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:62:53[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:84:19[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:23:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)
Error reading lifetime Google Accounts: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getLifetimeGoogleAccounts [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:83:51[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:85:27[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:23:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)

Error reading cached Google Account: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getCachedGoogleAccount [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:62:53[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:84:19[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:72:25
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
Error reading lifetime Google Accounts: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getLifetimeGoogleAccounts [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:83:51[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:85:27[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:72:25
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)

            </system-out>
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at readInstallationIdFromFile [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:25:71[90m)[39m
    at getInstallationId [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:43:26[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:103:36[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:23:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)

Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at readInstallationIdFromFile [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:25:71[90m)[39m
    at getInstallationId [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:43:26[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:103:36[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:72:25
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)

            </system-err>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isInFallbackMode &gt; should start as false for new session" time="0.0036828">
            <system-out>
Error reading cached Google Account: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getCachedGoogleAccount [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:62:53[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:84:19[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:23:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)
Error reading lifetime Google Accounts: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getLifetimeGoogleAccounts [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:83:51[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:85:27[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:23:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)

            </system-out>
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at readInstallationIdFromFile [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:25:71[90m)[39m
    at getInstallationId [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:43:26[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:103:36[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:23:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)

            </system-err>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isInFallbackMode &gt; should remain false if no model switch occurs" time="0.0029154">
            <system-out>
Error reading cached Google Account: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getCachedGoogleAccount [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:62:53[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:84:19[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:23:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)
Error reading lifetime Google Accounts: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getLifetimeGoogleAccounts [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:83:51[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:85:27[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:23:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)

            </system-out>
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at readInstallationIdFromFile [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:25:71[90m)[39m
    at getInstallationId [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:43:26[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:103:36[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:23:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)

            </system-err>
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isInFallbackMode &gt; should persist switched state throughout session" time="0.0253155">
            <system-out>
Error reading cached Google Account: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getCachedGoogleAccount [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:62:53[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:84:19[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:23:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)
Error reading lifetime Google Accounts: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getLifetimeGoogleAccounts [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:83:51[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:85:27[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:23:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)

            </system-out>
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at readInstallationIdFromFile [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:25:71[90m)[39m
    at getInstallationId [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:43:26[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:103:36[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\config\flashFallback.test.ts:23:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/core/client.test.ts" timestamp="2025-07-31T16:52:10.320Z" hostname="Involvex" tests="35" failures="0" errors="0" skipped="0" time="0.8386159">
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should throw an error for non-positive numbers" time="0.0046987">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should throw an error for a fraction greater than or equal to 1" time="0.0004464">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a fraction in the middle" time="0.0004551">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a fraction that results in the last index" time="0.0001951">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle an empty history" time="0.0001629">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a history with only one item" time="0.0001612">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle history with weird parts" time="0.0001984">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should call embedContent with correct parameters and return embeddings" time="0.0442025">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should return an empty array if an empty array is passed" time="0.0047291">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API response has no embeddings array" time="0.0091377">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API response has an empty embeddings array" time="0.0090681">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API returns a mismatched number of embeddings" time="0.013255">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if any embedding has nullish values" time="0.0067151">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if any embedding has an empty values array" time="0.0083724">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should propagate errors from the API call" time="0.1439263">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateContent &gt; should call generateContent with the correct parameters" time="0.0153399">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateJson &gt; should call generateContent with the correct parameters" time="0.0134272">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateJson &gt; should allow overriding model and config" time="0.0403783">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; addHistory &gt; should call chat.addHistory with the provided content" time="0.0079418">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; resetChat &gt; should create a new chat session, clearing the old history" time="0.0184918">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should not trigger summarization if token count is below threshold" time="0.0348268">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should trigger summarization if token count is at threshold" time="0.0118839">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should not compress across a function call response" time="0.0096169">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should always trigger summarization when force is true, regardless of token count" time="0.0195441">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should include IDE context when ideModeFeature is enabled" time="0.0228664">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should not add context if ideModeFeature is enabled but no open files" time="0.0093862">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should add context if ideModeFeature is enabled and there is one active file" time="0.0088916">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should add context if ideModeFeature is enabled and there are open files but no active file" time="0.0119979">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should return the turn instance after the stream is complete" time="0.0171229">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should stop infinite loop after MAX_TURNS when nextSpeaker always returns model" time="0.1208036">
            <system-out>
checkNextSpeaker called 100 times - infinite loop protection worked

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should yield MaxSessionTurns and stop when session turn limit is reached" time="0.0164662">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should respect MAX_TURNS limit even when turns parameter is set to a large value" time="0.1765159">
            <system-out>
Infinite loop protection working: checkNextSpeaker called 100 times, 1 events generated (properly bounded by MAX_TURNS)

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateContent &gt; should use current model from config for content generation" time="0.0097374">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should use current model from config for token counting after sendMessage" time="0.0100633">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; handleFlashFallback &gt; should use current model from config when checking for fallback" time="0.0086162">
        </testcase>
    </testsuite>
    <testsuite name="src/core/contentGenerator.test.ts" timestamp="2025-07-31T16:52:10.327Z" hostname="Involvex" tests="7" failures="0" errors="0" skipped="0" time="0.0166311">
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGenerator &gt; should create a CodeAssistContentGenerator" time="0.00356">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGenerator &gt; should create a GoogleGenAI content generator" time="0.0033019">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Gemini using GEMINI_API_KEY when set" time="0.0026176">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should not configure for Gemini if GEMINI_API_KEY is empty" time="0.0014205">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Vertex AI using GOOGLE_API_KEY when set" time="0.001153">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Vertex AI using GCP project and location when set" time="0.0011134">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should not configure for Vertex AI if required env vars are empty" time="0.0009452">
        </testcase>
    </testsuite>
    <testsuite name="src/core/coreToolScheduler.test.ts" timestamp="2025-07-31T16:52:10.329Z" hostname="Involvex" tests="15" failures="0" errors="0" skipped="0" time="0.0318772">
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler &gt; should cancel a tool call if the signal is aborted before confirmation" time="0.010609">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler with payload &gt; should update args and diff and execute tool when payload is provided" time="0.0088062">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle simple string llmContent" time="0.0004604">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a single Part with text" time="0.0002954">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a PartListUnion array with a single text Part" time="0.0002728">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent with inlineData" time="0.0004537">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent with fileData" time="0.0003116">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an array of multiple Parts (text and inlineData)" time="0.0002465">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an array with a single inlineData Part" time="0.0002638">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a generic Part (not text, inlineData, or fileData)" time="0.0002975">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle empty string llmContent" time="0.0002239">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an empty array" time="0.0002158">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a Part with undefined inlineData/fileData/text" time="0.0002125">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler edit cancellation &gt; should preserve diff when an edit is cancelled" time="0.0025981">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler YOLO mode &gt; should execute tool requiring confirmation directly without waiting" time="0.0040376">
        </testcase>
    </testsuite>
    <testsuite name="src/core/geminiChat.test.ts" timestamp="2025-07-31T16:52:10.331Z" hostname="Involvex" tests="21" failures="0" errors="0" skipped="0" time="0.0478239">
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessage &gt; should call generateContent with the correct parameters" time="0.0165349">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should call generateContentStream with the correct parameters" time="0.0045799">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should add user input and a single model output to history" time="0.0009259">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should consolidate adjacent model outputs" time="0.0008147">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle a mix of user and model roles in outputContents (though unusual)" time="0.00074">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should consolidate multiple adjacent model outputs correctly" time="0.000638">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should not consolidate if roles are different between model outputs" time="0.0008019">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should merge with last history entry if it is also a model output" time="0.0024318">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should correctly merge consolidated new output with existing model history" time="0.001007">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle empty modelOutput array" time="0.0009708">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle aggregating modelOutput" time="0.0010589">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle modelOutput with parts being undefined or empty (if they pass initial every check)" time="0.0008455">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should correctly handle automaticFunctionCallingHistory" time="0.0012877">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should add userInput if AFC history is present but empty" time="0.0009325">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should skip &quot;thought&quot; content from modelOutput" time="0.0011598">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should skip &quot;thought&quot; content even if it is the only content" time="0.0009815">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should correctly consolidate text parts when a thought part is in between" time="0.000905">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle multiple thought parts correctly" time="0.0016709">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle thought part at the end of outputContents" time="0.0029744">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; addHistory &gt; should add a new content item to the history" time="0.001305">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; addHistory &gt; should add multiple items correctly" time="0.000969">
        </testcase>
    </testsuite>
    <testsuite name="src/core/logger.test.ts" timestamp="2025-07-31T16:52:10.336Z" hostname="Involvex" tests="32" failures="0" errors="0" skipped="0" time="0.8789513">
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should create .gemini directory and an empty log file if none exist" time="0.0264633">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should load existing logs and set correct messageId for the current session" time="0.0083767">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should set messageId to 0 for a new session if log file exists but has no logs for current session" time="0.0072857">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should be idempotent" time="0.0070037">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should handle invalid JSON in log file by backing it up and starting fresh" time="0.0133941">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should handle non-array JSON in log file by backing it up and starting fresh" time="0.0418694">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should append a message to the log file and update in-memory logs" time="0.0167807">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should correctly increment messageId for subsequent messages in the same session" time="0.0284579">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should handle logger not initialized" time="0.011629">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should simulate concurrent writes from different logger instances to the same file" time="0.0131683">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should not throw, not increment messageId, and log error if writing to file fails" time="0.0081051">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should retrieve all user messages from logs, sorted newest first" time="0.0314707">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should return empty array if no user messages exist" time="0.0140117">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should return empty array if logger not initialized" time="0.0090988">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should save a checkpoint" time="0.0134901">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should save a checkpoint" time="0.0146061">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should save a checkpoint" time="0.0079404">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should save a checkpoint" time="0.0060054">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should not throw if logger is not initialized" time="0.0178306">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should load from a checkpoint" time="0.0101201">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should load from a checkpoint" time="0.0121485">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should load from a checkpoint" time="0.0351655">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should load from a checkpoint" time="0.0175836">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if a tagged checkpoint file does not exist" time="0.0272799">
            <system-err>
Failed to read or parse checkpoint file C:\Users\lukas\.gemini\tmp\a6a0e6cbeb6222a79e32236629bdc5d54cce4ff813f3d23830611a2703d62943\checkpoint-nonexistent-tag.json: Error: ENOENT: no such file or directory, open &apos;C:\Users\lukas\.gemini\tmp\a6a0e6cbeb6222a79e32236629bdc5d54cce4ff813f3d23830611a2703d62943\checkpoint-nonexistent-tag.json&apos;
[90m    at open (node:internal/fs/promises:639:25)[39m
[90m    at Object.readFile (node:internal/fs/promises:1243:14)[39m
    at Logger.loadCheckpoint [90m(D:\repos\gemini-cli\packages\core\[39msrc\core\logger.ts:274:27[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\core\logger.test.ts:464:22
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  errno: [33m-4058[39m,
  code: [32m&apos;ENOENT&apos;[39m,
  syscall: [32m&apos;open&apos;[39m,
  path: [32m&apos;C:\\Users\\lukas\\.gemini\\tmp\\a6a0e6cbeb6222a79e32236629bdc5d54cce4ff813f3d23830611a2703d62943\\checkpoint-nonexistent-tag.json&apos;[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if the checkpoint file does not exist" time="0.0118696">
            <system-err>
Failed to read or parse checkpoint file C:\Users\lukas\.gemini\tmp\a6a0e6cbeb6222a79e32236629bdc5d54cce4ff813f3d23830611a2703d62943\checkpoint-missing.json: Error: ENOENT: no such file or directory, open &apos;C:\Users\lukas\.gemini\tmp\a6a0e6cbeb6222a79e32236629bdc5d54cce4ff813f3d23830611a2703d62943\checkpoint-missing.json&apos;
[90m    at open (node:internal/fs/promises:639:25)[39m
[90m    at Object.readFile (node:internal/fs/promises:1243:14)[39m
    at Logger.loadCheckpoint [90m(D:\repos\gemini-cli\packages\core\[39msrc\core\logger.ts:274:27[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\core\logger.test.ts:470:22
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  errno: [33m-4058[39m,
  code: [32m&apos;ENOENT&apos;[39m,
  syscall: [32m&apos;open&apos;[39m,
  path: [32m&apos;C:\\Users\\lukas\\.gemini\\tmp\\a6a0e6cbeb6222a79e32236629bdc5d54cce4ff813f3d23830611a2703d62943\\checkpoint-missing.json&apos;[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if the file contains invalid JSON" time="0.0160753">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if logger is not initialized" time="0.169104">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; deleteCheckpoint &gt; should delete the specified checkpoint file and return true" time="0.1799393">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; deleteCheckpoint &gt; should return false if the checkpoint file does not exist" time="0.0683199">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; deleteCheckpoint &gt; should re-throw an error if file deletion fails for reasons other than not existing" time="0.0166747">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; deleteCheckpoint &gt; should return false if logger is not initialized" time="0.0073366">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; close &gt; should reset logger state" time="0.0055861">
        </testcase>
    </testsuite>
    <testsuite name="src/core/nonInteractiveToolExecutor.test.ts" timestamp="2025-07-31T16:52:10.342Z" hostname="Involvex" tests="5" failures="0" errors="0" skipped="0" time="0.018847">
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should execute a tool successfully" time="0.0097508">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an error if tool is not found" time="0.0021923">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an error if tool execution fails" time="0.001794">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should handle cancellation during tool execution" time="0.0019268">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should correctly format llmContent with inlineData" time="0.0013755">
        </testcase>
    </testsuite>
    <testsuite name="src/core/prompts.test.ts" timestamp="2025-07-31T16:52:10.343Z" hostname="Involvex" tests="23" failures="0" errors="0" skipped="0" time="0.0378774">
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when no userMemory is provided" time="0.0072272">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is empty string" time="0.0013678">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is whitespace only" time="0.0008181">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should append userMemory with separator when provided" time="0.000809">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include sandbox-specific instructions when SANDBOX env var is set" time="0.0007883">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include seatbelt-specific instructions when SANDBOX env var is &quot;sandbox-exec&quot;" time="0.0009212">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include non-sandbox instructions when SANDBOX env var is not set" time="0.0022247">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include git instructions when in a git repo" time="0.0007132">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should not include git instructions when not in a git repo" time="0.000631">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should use default prompt when GEMINI_SYSTEM_MD is &quot;false&quot;" time="0.0009584">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should use default prompt when GEMINI_SYSTEM_MD is &quot;0&quot;" time="0.0006308">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should throw error if GEMINI_SYSTEM_MD points to a non-existent file" time="0.0024432">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should read from default path when GEMINI_SYSTEM_MD is &quot;true&quot;" time="0.0059023">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should read from default path when GEMINI_SYSTEM_MD is &quot;1&quot;" time="0.0021643">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should read from custom path when GEMINI_SYSTEM_MD provides one, preserving case" time="0.0010633">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should expand tilde in custom path when GEMINI_SYSTEM_MD is set" time="0.0008674">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should not write to file when GEMINI_WRITE_SYSTEM_MD is &quot;false&quot;" time="0.0005377">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should not write to file when GEMINI_WRITE_SYSTEM_MD is &quot;0&quot;" time="0.0004464">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should write to default path when GEMINI_WRITE_SYSTEM_MD is &quot;true&quot;" time="0.0017819">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should write to default path when GEMINI_WRITE_SYSTEM_MD is &quot;1&quot;" time="0.0006533">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should write to custom path when GEMINI_WRITE_SYSTEM_MD provides one" time="0.0005932">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should expand tilde in custom path when GEMINI_WRITE_SYSTEM_MD is set" time="0.0007555">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should expand tilde in custom path when GEMINI_WRITE_SYSTEM_MD is just ~" time="0.000707">
        </testcase>
    </testsuite>
    <testsuite name="src/core/turn.test.ts" timestamp="2025-07-31T16:52:10.348Z" hostname="Involvex" tests="12" failures="0" errors="0" skipped="0" time="0.0206136">
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; constructor &gt; should initialize pendingToolCalls and debugResponses" time="0.0043496">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield content events for text parts" time="0.0052498">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield tool_call_request events for function calls" time="0.0019757">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield UserCancelled event if signal is aborted" time="0.000874">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield Error event and report if sendMessageStream throws" time="0.0014063">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should handle function calls with undefined name or args" time="0.0010579">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield finished event when response has finish reason" time="0.0004584">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield finished event for MAX_TOKENS finish reason" time="0.0004294">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield finished event for SAFETY finish reason" time="0.0003995">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should not yield finished event when there is no finish reason" time="0.0003707">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should handle multiple responses with different finish reasons" time="0.000399">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; getDebugResponses &gt; should return collected debug responses" time="0.0003944">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/converter.test.ts" timestamp="2025-07-31T16:52:10.350Z" hostname="Involvex" tests="11" failures="0" errors="0" skipped="0" time="0.0125113">
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a simple request with project" time="0.0052119">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a request without a project" time="0.0006881">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a request with sessionId" time="0.000348">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle string content" time="0.0002821">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle Part[] content" time="0.0003804">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle system instructions" time="0.0002832">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle generation config" time="0.0002219">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle all generation config fields" time="0.00028">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should convert a simple response" time="0.0004595">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should handle prompt feedback and usage metadata" time="0.0002447">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should handle automatic function calling history" time="0.0001994">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/oauth2.test.ts" timestamp="2025-07-31T16:52:10.352Z" hostname="Involvex" tests="10" failures="0" errors="0" skipped="0" time="0.8643094">
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; should perform a web login" time="0.0248938">
            <system-out>


Code Assist login required.
Attempting to open authentication page in your browser.
Otherwise navigate to:

https://example.com/auth



Waiting for authentication...

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; should perform login with user code" time="0.0085251">
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should attempt to load cached credentials first" time="0.0134078">
            <system-out>
Loaded cached credentials.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should use Compute to get a client if no cached credentials exist" time="0.0050491">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should not cache the credentials after fetching them via ADC" time="0.0090709">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should return the Compute client on successful ADC authentication" time="0.0045522">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; in Cloud Shell &gt; should throw an error if ADC fails" time="0.0068322">
            <system-out>
Attempting to authenticate via Cloud Shell VM&apos;s ADC.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with GCP environment variables &gt; should use GOOGLE_CLOUD_ACCESS_TOKEN when GOOGLE_GENAI_USE_GCA is true" time="0.0192181">
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with GCP environment variables &gt; should not use GCP token if GOOGLE_CLOUD_ACCESS_TOKEN is not set" time="0.330889">
            <system-out>
Loaded cached credentials.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with GCP environment variables &gt; should not use GCP token if GOOGLE_GENAI_USE_GCA is not set" time="0.4386698">
            <system-out>
Loaded cached credentials.

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/server.test.ts" timestamp="2025-07-31T16:52:10.356Z" hostname="Involvex" tests="7" failures="0" errors="0" skipped="0" time="0.0317509">
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should be able to be constructed" time="0.0055873">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the generateContent endpoint" time="0.0077432">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the generateContentStream endpoint" time="0.0030488">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the onboardUser endpoint" time="0.00278">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the loadCodeAssist endpoint" time="0.0026391">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should return 0 for countTokens" time="0.002947">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should throw an error for embedContent" time="0.0047383">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/setup.test.ts" timestamp="2025-07-31T16:52:10.357Z" hostname="Involvex" tests="3" failures="0" errors="0" skipped="0" time="0.0122502">
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser &gt; should use GOOGLE_CLOUD_PROJECT when set" time="0.0071367">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser &gt; should treat empty GOOGLE_CLOUD_PROJECT as undefined and use project from server" time="0.0013823">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser &gt; should throw ProjectIdRequiredError when no project ID is available" time="0.0017003">
        </testcase>
    </testsuite>
    <testsuite name="src/ide/ide-installer.test.ts" timestamp="2025-07-31T16:52:10.358Z" hostname="Involvex" tests="6" failures="0" errors="0" skipped="0" time="1.0810278">
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; getIdeInstaller &gt; should return a VsCodeInstaller for &quot;vscode&quot;" time="0.0029799">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; getIdeInstaller &gt; should return null for an unknown IDE" time="0.0002224">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; isInstalled &gt; should return true if command is in PATH" time="0.0023">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; isInstalled &gt; should return true if command is in a known location" time="0.4970638">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; isInstalled &gt; should return false if command is not found" time="0.2884461">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; should return a failure message if VS Code is not installed" time="0.2877904">
        </testcase>
    </testsuite>
    <testsuite name="src/ide/ideContext.test.ts" timestamp="2025-07-31T16:52:10.359Z" hostname="Involvex" tests="16" failures="0" errors="0" skipped="0" time="0.0182315">
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should return undefined initially for ide context" time="0.0025132">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should set and retrieve the ide context" time="0.0012203">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should update the ide context when called multiple times" time="0.0002797">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should handle empty string for file path" time="0.0002246">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should notify subscribers when ide context changes" time="0.0049117">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should stop notifying a subscriber after unsubscribe" time="0.0005838">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should clear the ide context" time="0.000296">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; FileSchema &gt; should validate a file with only required fields" time="0.0025287">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; FileSchema &gt; should validate a file with all fields" time="0.0004778">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; FileSchema &gt; should fail validation if path is missing" time="0.0008272">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; FileSchema &gt; should fail validation if timestamp is missing" time="0.0002502">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; IdeContextSchema &gt; should validate an empty context" time="0.0002202">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; IdeContextSchema &gt; should validate a context with an empty workspaceState" time="0.0002124">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; IdeContextSchema &gt; should validate a context with an empty openFiles array" time="0.0005189">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; IdeContextSchema &gt; should validate a context with a valid file" time="0.000298">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; IdeContextSchema &gt; should fail validation with an invalid file" time="0.0002419">
        </testcase>
    </testsuite>
    <testsuite name="src/mcp/google-auth-provider.test.ts" timestamp="2025-07-31T16:52:10.362Z" hostname="Involvex" tests="4" failures="0" errors="0" skipped="0" time="0.0202317">
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; should throw an error if no scopes are provided" time="0.0042352">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; should use scopes from the config if provided" time="0.0067364">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; with provider instance &gt; should return credentials" time="0.0028621">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; with provider instance &gt; should return undefined if access token is not available" time="0.0041156">
            <system-err>
Failed to get access token from Google ADC

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/mcp/oauth-provider.test.ts" timestamp="2025-07-31T16:52:10.364Z" hostname="Involvex" tests="17" failures="0" errors="0" skipped="0" time="0.204483">
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should perform complete OAuth flow with PKCE" time="0.0392366">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should handle OAuth discovery when no authorization URL provided" time="0.0284962">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should perform dynamic client registration when no client ID provided" time="0.0282623">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should handle OAuth callback errors" time="0.0167375">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should handle state mismatch in callback" time="0.0135109">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should handle token exchange failure" time="0.0159048">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should handle callback timeout" time="0.0035432">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; refreshAccessToken &gt; should refresh token successfully" time="0.0029739">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; refreshAccessToken &gt; should include client secret in refresh request when available" time="0.0013889">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; refreshAccessToken &gt; should handle refresh token failure" time="0.0013192">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; getValidToken &gt; should return valid token when not expired" time="0.0041118">
            <system-out>
Getting valid token for server: test-server

Found token for server: test-server, expired: false
Returning valid token for server: test-server

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; getValidToken &gt; should refresh expired token and return new token" time="0.0032451">
            <system-out>
Getting valid token for server: test-server

Found token for server: test-server, expired: true

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; getValidToken &gt; should return null when no credentials exist" time="0.0014092">
            <system-out>
Getting valid token for server: test-server

No credentials found for server: test-server

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; getValidToken &gt; should handle refresh failure and remove invalid token" time="0.001969">
            <system-out>
Getting valid token for server: test-server

Found token for server: test-server, expired: true

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; getValidToken &gt; should return null for token without refresh capability" time="0.0010954">
            <system-out>
Getting valid token for server: test-server

Found token for server: test-server, expired: true

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; PKCE parameter generation &gt; should generate valid PKCE parameters" time="0.0216709">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; Authorization URL building &gt; should build correct authorization URL with all parameters" time="0.0161136">
        </testcase>
    </testsuite>
    <testsuite name="src/mcp/oauth-token-storage.test.ts" timestamp="2025-07-31T16:52:10.367Z" hostname="Involvex" tests="21" failures="0" errors="0" skipped="0" time="0.0422631">
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; loadTokens &gt; should return empty map when token file does not exist" time="0.0046619">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; loadTokens &gt; should load tokens from file successfully" time="0.0035895">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; loadTokens &gt; should handle corrupted token file gracefully" time="0.0056248">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; loadTokens &gt; should handle file read errors other than ENOENT" time="0.0010335">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; saveToken &gt; should save token with restricted permissions" time="0.0013411">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; saveToken &gt; should update existing token for same server" time="0.0026985">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; saveToken &gt; should handle write errors gracefully" time="0.0035507">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; getToken &gt; should return token for existing server" time="0.000803">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; getToken &gt; should return null for non-existent server" time="0.0010011">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; getToken &gt; should return null when no tokens file exists" time="0.000766">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; removeToken &gt; should remove token for specific server" time="0.0013418">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; removeToken &gt; should remove token file when no tokens remain" time="0.0030857">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; removeToken &gt; should handle removal of non-existent token gracefully" time="0.0006937">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; removeToken &gt; should handle file operation errors gracefully" time="0.0016097">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; isTokenExpired &gt; should return false for token without expiry" time="0.0005004">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; isTokenExpired &gt; should return false for valid token" time="0.0004586">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; isTokenExpired &gt; should return true for expired token" time="0.001805">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; isTokenExpired &gt; should return true for token expiring within buffer time" time="0.0010582">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; clearAllTokens &gt; should remove token file successfully" time="0.0009118">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; clearAllTokens &gt; should handle non-existent file gracefully" time="0.0011781">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; clearAllTokens &gt; should handle other file errors gracefully" time="0.0012454">
        </testcase>
    </testsuite>
    <testsuite name="src/mcp/oauth-utils.test.ts" timestamp="2025-07-31T16:52:10.372Z" hostname="Involvex" tests="16" failures="0" errors="0" skipped="0" time="0.0150261">
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; buildWellKnownUrls &gt; should build correct well-known URLs" time="0.0037924">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; fetchProtectedResourceMetadata &gt; should fetch protected resource metadata successfully" time="0.0016248">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; fetchProtectedResourceMetadata &gt; should return null when fetch fails" time="0.0005842">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; fetchAuthorizationServerMetadata &gt; should fetch authorization server metadata successfully" time="0.0005018">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; fetchAuthorizationServerMetadata &gt; should return null when fetch fails" time="0.0004535">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; metadataToOAuthConfig &gt; should convert metadata to OAuth config" time="0.0006972">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; metadataToOAuthConfig &gt; should handle empty scopes" time="0.00044">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; parseWWWAuthenticateHeader &gt; should parse resource metadata URI from WWW-Authenticate header" time="0.0004984">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; parseWWWAuthenticateHeader &gt; should return null when no resource metadata URI is found" time="0.0004841">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; extractBaseUrl &gt; should extract base URL from MCP server URL" time="0.0005803">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; extractBaseUrl &gt; should handle URLs with ports" time="0.0003375">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; isSSEEndpoint &gt; should return true for SSE endpoints" time="0.0003897">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; isSSEEndpoint &gt; should return true for non-MCP endpoints" time="0.0003778">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; isSSEEndpoint &gt; should return false for MCP endpoints" time="0.0004957">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; buildResourceParameter &gt; should build resource parameter from endpoint URL" time="0.0004795">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; buildResourceParameter &gt; should handle URLs with ports" time="0.0004737">
        </testcase>
    </testsuite>
    <testsuite name="src/services/fileDiscoveryService.test.ts" timestamp="2025-07-31T16:52:10.375Z" hostname="Involvex" tests="13" failures="0" errors="0" skipped="0" time="0.2188103">
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; initialization &gt; should initialize git ignore parser by default in a git repo" time="0.0324648">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; initialization &gt; should not load git repo patterns when not in a git repo" time="0.0098484">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; initialization &gt; should load .geminiignore patterns even when not in a git repo" time="0.0108179">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should filter out git-ignored and gemini-ignored files by default" time="0.0269427">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should not filter files when respectGitIgnore is false" time="0.0123746">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should not filter files when respectGeminiIgnore is false" time="0.0140801">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should handle empty file list" time="0.0106939">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &amp; shouldGeminiIgnoreFile &gt; should return true for git-ignored files" time="0.0171791">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &amp; shouldGeminiIgnoreFile &gt; should return false for non-git-ignored files" time="0.019984">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &amp; shouldGeminiIgnoreFile &gt; should return true for gemini-ignored files" time="0.0126711">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &amp; shouldGeminiIgnoreFile &gt; should return false for non-gemini-ignored files" time="0.016806">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; edge cases &gt; should handle relative project root paths" time="0.021035">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; edge cases &gt; should handle filterFiles with undefined options" time="0.0106371">
        </testcase>
    </testsuite>
    <testsuite name="src/services/gitService.test.ts" timestamp="2025-07-31T16:52:10.377Z" hostname="Involvex" tests="14" failures="0" errors="0" skipped="0" time="0.1877815">
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; constructor &gt; should successfully create an instance" time="0.0099783">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; verifyGitAvailability &gt; should resolve true if git --version command succeeds" time="0.0065473">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; verifyGitAvailability &gt; should resolve false if git --version command fails" time="0.0041958">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; initialize &gt; should throw an error if Git is not available" time="0.006806">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; initialize &gt; should call setupShadowGitRepository if Git is available" time="0.0047555">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should create history and repository directories" time="0.0138598">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should create a .gitconfig file with the correct content" time="0.0202278">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should initialize git repo in historyDir if not already initialized" time="0.0196996">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should not initialize git repo if already initialized" time="0.023625">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should copy .gitignore from projectRoot if it exists" time="0.0111238">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should not create a .gitignore in shadow repo if project .gitignore does not exist" time="0.0124948">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should throw an error if reading projectRoot .gitignore fails with other errors" time="0.0162077">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should make an initial commit if no commits exist in history repo" time="0.0147503">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should not make an initial commit if commits already exist" time="0.0206466">
        </testcase>
    </testsuite>
    <testsuite name="src/services/loopDetectionService.test.ts" timestamp="2025-07-31T16:52:10.380Z" hostname="Involvex" tests="23" failures="0" errors="0" skipped="0" time="0.7679268">
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should not detect a loop for fewer than TOOL_CALL_LOOP_THRESHOLD identical calls" time="0.0045278">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should detect a loop on the TOOL_CALL_LOOP_THRESHOLD-th identical call" time="0.002176">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should detect a loop on subsequent identical calls" time="0.0004121">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should not detect a loop for different tool calls" time="0.0007721">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should not reset tool call counter for other event types" time="0.0008253">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection &gt; should not detect a loop for random content" time="0.5544363">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection &gt; should detect a loop when a chunk of content repeats consecutively" time="0.0036073">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection &gt; should not detect a loop if repetitions are very far apart" time="0.041113">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should not detect a loop when repetitive content is inside a code block" time="0.0006839">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should detect a loop when repetitive content is outside a code block" time="0.070214">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should handle content with multiple code blocks and no loops" time="0.0006083">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should handle content with mixed code blocks and looping text" time="0.0081172">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should not detect a loop for a long code block with some repeating tokens" time="0.0033525">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking when a code fence is found" time="0.0072033">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Edge Cases &gt; should handle empty content" time="0.0005435">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Reset Functionality &gt; tool call should reset content count" time="0.0041445">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; General Behavior &gt; should return false for unhandled event types" time="0.0006046">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should not trigger LLM check before LLM_CHECK_AFTER_TURNS" time="0.0013395">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should trigger LLM check on the 30th turn" time="0.0014729">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should detect a cognitive loop when confidence is high" time="0.011464">
            <system-err>
Repetitive actions

            </system-err>
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should not detect a loop when confidence is low" time="0.0010874">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should adjust the check interval based on confidence" time="0.0015909">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should handle errors from generateJson gracefully" time="0.0430768">
            <system-out>
Error: API error
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\services\loopDetectionService.test.ts:424:26
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/services/shellExecutionService.test.ts" timestamp="2025-07-31T16:52:10.384Z" hostname="Involvex" tests="14" failures="0" errors="0" skipped="0" time="0.0461529">
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Successful Execution &gt; should execute a command and capture stdout and stderr" time="0.0123637">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Successful Execution &gt; should strip ANSI codes from output" time="0.001852">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Successful Execution &gt; should correctly decode multi-byte characters split across chunks" time="0.0015444">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Successful Execution &gt; should handle commands with no output" time="0.0015239">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Failed Execution &gt; should capture a non-zero exit code and format output correctly" time="0.0015615">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Failed Execution &gt; should capture a termination signal" time="0.0036317">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Failed Execution &gt; should handle a spawn error" time="0.0013554">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Aborting Commands &gt; on &apos;linux&apos; &gt; should abort a running process and set the aborted flag" time="0.0020679">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Aborting Commands &gt; on &apos;win32&apos; &gt; should abort a running process and set the aborted flag" time="0.0013882">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Aborting Commands &gt; should gracefully attempt SIGKILL on linux if SIGTERM fails" time="0.0069018">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Binary Output &gt; should detect binary output and switch to progress events" time="0.0034402">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Binary Output &gt; should not emit data events after binary is detected" time="0.0016224">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Platform-Specific Behavior &gt; should use cmd.exe on Windows" time="0.0024597">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Platform-Specific Behavior &gt; should use bash and detached process group on Linux" time="0.0015233">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/loggers.test.ts" timestamp="2025-07-31T16:52:10.386Z" hostname="Involvex" tests="13" failures="0" errors="0" skipped="0" time="0.1199564">
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logCliConfiguration &gt; should log the cli configuration" time="0.0501942">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logUserPrompt &gt; should log a user prompt" time="0.0026416">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logUserPrompt &gt; should not log prompt if disabled" time="0.0031761">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiResponse &gt; should log an API response with all fields" time="0.0032453">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiResponse &gt; should log an API response with an error" time="0.0263693">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiRequest &gt; should log an API request with request_text" time="0.0049501">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiRequest &gt; should log an API request without request_text" time="0.0039722">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logFlashFallback &gt; should log flash fallback event" time="0.0076675">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with all fields" time="0.0033865">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with a reject decision" time="0.0030455">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with a modify decision" time="0.002845">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call without a decision" time="0.0021509">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a failed tool call with an error" time="0.0024163">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/metrics.test.ts" timestamp="2025-07-31T16:52:10.391Z" hostname="Involvex" tests="8" failures="0" errors="0" skipped="0" time="0.0491054">
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should not record metrics if not initialized" time="0.0091087">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should record token usage with the correct attributes" time="0.0062614">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should record token usage for different types" time="0.0072092">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should handle different models" time="0.0051977">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should not record metrics if not initialized" time="0.0043581">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file creation with all attributes" time="0.0044143">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file read with minimal attributes" time="0.0053768">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file update with some attributes" time="0.0046274">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/telemetry.test.ts" timestamp="2025-07-31T16:52:10.392Z" hostname="Involvex" tests="2" failures="0" errors="0" skipped="0" time="0.031304">
        <testcase classname="src/telemetry/telemetry.test.ts" name="telemetry &gt; should initialize the telemetry service" time="0.0206045">
            <system-out>
OpenTelemetry SDK started successfully.

OpenTelemetry SDK shut down successfully.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/telemetry.test.ts" name="telemetry &gt; should shutdown the telemetry service" time="0.008247">
            <system-out>
OpenTelemetry SDK started successfully.

OpenTelemetry SDK shut down successfully.

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/uiTelemetry.test.ts" timestamp="2025-07-31T16:52:10.393Z" hostname="Involvex" tests="17" failures="0" errors="0" skipped="0" time="0.021927">
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; should have correct initial metrics" time="0.0050231">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; should emit an update event when an event is added" time="0.002729">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should process a single ApiResponseEvent" time="0.0004544">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should aggregate multiple ApiResponseEvents for the same model" time="0.0004434">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should handle ApiResponseEvents for different models" time="0.0007204">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Error Event Processing &gt; should process a single ApiErrorEvent" time="0.0003067">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Error Event Processing &gt; should aggregate ApiErrorEvents and ApiResponseEvents" time="0.000295">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a single successful ToolCallEvent" time="0.0025096">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a single failed ToolCallEvent" time="0.0006816">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a ToolCallEvent with modify decision" time="0.0003044">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a ToolCallEvent without a decision" time="0.0004625">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should aggregate multiple ToolCallEvents for the same tool" time="0.0008771">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should handle ToolCallEvents for different tools" time="0.0006652">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; resetLastPromptTokenCount &gt; should reset the last prompt token count to 0" time="0.0024269">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; resetLastPromptTokenCount &gt; should emit an update event when resetLastPromptTokenCount is called" time="0.0005491">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; resetLastPromptTokenCount &gt; should not affect other metrics when resetLastPromptTokenCount is called" time="0.0003298">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; resetLastPromptTokenCount &gt; should work correctly when called multiple times" time="0.0006017">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/edit.test.ts" timestamp="2025-07-31T16:52:10.396Z" hostname="Involvex" tests="32" failures="0" errors="0" skipped="0" time="0.305129">
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return newString if isNewFile is true" time="0.0062404">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return newString if currentContent is null and oldString is empty (defensive)" time="0.0020826">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return empty string if currentContent is null and oldString is not empty (defensive)" time="0.0018227">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should replace oldString with newString in currentContent" time="0.0017987">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return currentContent if oldString is empty and not a new file" time="0.0017863">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return null for valid params" time="0.0651575">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return error for relative path" time="0.0064667">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return error for path outside root" time="0.0102884">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if params are invalid" time="0.0082286">
            <system-err>
[EditTool Wrapper] Attempted confirmation with invalid parameters: File path must be absolute: relative.txt

            </system-err>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should request confirmation for valid edit" time="0.0148801">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if old_string is not found (ensureCorrectEdit returns 0)" time="0.014444">
            <system-out>
Error: Failed to edit, could not find the string to replace.

            </system-out>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if multiple occurrences of old_string are found (ensureCorrectEdit returns &gt; 1)" time="0.0065313">
            <system-out>
Error: Failed to edit, expected 1 occurrence but found 2.

            </system-out>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should request confirmation for creating a new file (empty old_string)" time="0.0059668">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should use corrected params from ensureCorrectEdit for diff generation" time="0.0130717">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if params are invalid" time="0.0060899">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should edit an existing file and return diff with fileName" time="0.0084796">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should create a new file if old_string is empty and file does not exist, and return created message" time="0.0072544">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if old_string is not found in file" time="0.0095538">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if multiple occurrences of old_string are found" time="0.0069435">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should successfully replace multiple occurrences when expected_replacements specified" time="0.0110111">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if expected_replacements does not match actual occurrences" time="0.0084976">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if trying to create a file that already exists (empty old_string)" time="0.0072494">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should include modification message when proposed content is modified" time="0.0200627">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should not include modification message when proposed content is not modified" time="0.0088746">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should not include modification message when modified_by_user is not provided" time="0.0088671">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if old_string and new_string are identical" time="0.0088018">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should return &quot;No file changes to...&quot; if old_string and new_string are the same" time="0.0035003">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should return a snippet of old and new strings if they are different" time="0.0033914">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should handle very short strings correctly in the description" time="0.00594">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should truncate long strings in the description" time="0.0031743">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; workspace boundary validation &gt; should validate paths are within workspace root" time="0.0087521">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; workspace boundary validation &gt; should reject paths outside workspace root" time="0.0058172">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/glob.test.ts" timestamp="2025-07-31T16:52:10.402Z" hostname="Involvex" tests="30" failures="0" errors="0" skipped="0" time="5.160895">
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files matching a simple pattern in the root" time="0.1754114">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-sensitively when case_sensitive is true" time="0.1577909">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-insensitively by default (pattern: *.TXT)" time="0.1742342">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-insensitively when case_sensitive is false (pattern: *.TXT)" time="0.0867722">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files using a pattern that includes a subdirectory" time="0.1264932">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files in a specified relative path (relative to rootDir)" time="0.1470706">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files using a deep globstar pattern (e.g., **/*.log)" time="0.1157932">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should return &quot;No files found&quot; message when pattern matches nothing" time="0.1279996">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should correctly sort files by modification time (newest first)" time="0.196867">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern only)" time="0.1681084">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern and path)" time="0.1667191">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern, path, and case_sensitive)" time="0.1617419">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is missing (schema validation)" time="0.2130184">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is an empty string" time="0.2280471">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is only whitespace" time="0.1622418">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if path is provided but is not a string (schema validation)" time="0.2974549">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if case_sensitive is provided but is not a boolean (schema validation)" time="0.089363">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if search path resolves outside the tool&apos;s root directory" time="0.0790579">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if specified search path does not exist" time="0.3010016">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if specified search path is a file, not a directory" time="0.0918927">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; workspace boundary validation &gt; should validate search paths are within workspace boundaries" time="0.8477393">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; workspace boundary validation &gt; should provide clear error messages when path is outside workspace" time="0.8065943">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; workspace boundary validation &gt; should work with paths in workspace subdirectories" time="0.2066759">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort a mix of recent and older files correctly" time="0.0226418">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort only recent files by mtime descending" time="0.0004791">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort only older files alphabetically by path" time="0.0002904">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should handle an empty array" time="0.0002226">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should correctly sort files when mtimes are identical for older files" time="0.0002189">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should correctly sort files when mtimes are identical for recent files (maintaining mtime sort)" time="0.0006378">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should use recencyThresholdMs parameter correctly" time="0.0002178">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/grep.test.ts" timestamp="2025-07-31T16:52:10.408Z" hostname="Involvex" tests="23" failures="0" errors="0" skipped="0" time="0.8786896">
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern only)" time="0.0712517">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern and path)" time="0.0183345">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern, path, and include)" time="0.0085443">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if pattern is missing" time="0.0076642">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error for invalid regex pattern" time="0.0072478">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if path does not exist" time="0.0125612">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if path is a file, not a directory" time="0.0093298">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches for a simple pattern in all files" time="0.0417798">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches in a specific path" time="0.0481145">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches with an include glob" time="0.038788">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches with an include glob and path" time="0.0308608">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should return &quot;No matches found&quot; when pattern does not exist" time="0.0193389">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should handle regex special characters correctly" time="0.1009482">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should be case-insensitive by default (JS fallback)" time="0.15635">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should return an error if params are invalid" time="0.0268918">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; multi-directory workspace &gt; should search across all workspace directories when no path is specified" time="0.0602136">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; multi-directory workspace &gt; should search only specified path within workspace directories" time="0.0513755">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern only" time="0.018066">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern and include" time="0.0115584">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern and path" time="0.0544341">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should indicate searching across all workspace directories when no path specified" time="0.0341932">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern, include, and path" time="0.0206852">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should use ./ for root path in description" time="0.0249392">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/ls.test.ts" timestamp="2025-07-31T16:52:10.414Z" hostname="Involvex" tests="22" failures="0" errors="0" skipped="0" time="0.3435526">
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; parameter validation &gt; should accept valid absolute paths within workspace" time="0.0991346">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; parameter validation &gt; should reject relative paths" time="0.0137933">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; parameter validation &gt; should reject paths outside workspace with clear error message" time="0.0073795">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; parameter validation &gt; should accept paths in secondary workspace directory" time="0.0114156">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should list files in a directory" time="0.034101">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should list files from secondary workspace directory" time="0.004674">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should handle empty directories" time="0.0033972">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should respect ignore patterns" time="0.0037264">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should respect gitignore patterns" time="0.0041483">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should respect geminiignore patterns" time="0.0040261">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should handle non-directory paths" time="0.0041641">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should handle non-existent paths" time="0.0063372">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should sort directories first, then files alphabetically" time="0.0062644">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should handle permission errors gracefully" time="0.0048919">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should validate parameters and return error for invalid params" time="0.0063443">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should handle errors accessing individual files during listing" time="0.010716">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; getDescription &gt; should return shortened relative path" time="0.001352">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; getDescription &gt; should handle paths in secondary workspace" time="0.0009353">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; workspace boundary validation &gt; should accept paths in primary workspace directory" time="0.0067726">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; workspace boundary validation &gt; should accept paths in secondary workspace directory" time="0.0681253">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; workspace boundary validation &gt; should reject paths outside all workspace directories" time="0.0101821">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; workspace boundary validation &gt; should list files from secondary workspace directory" time="0.0258909">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/mcp-client.test.ts" timestamp="2025-07-31T16:52:10.418Z" hostname="Involvex" tests="23" failures="0" errors="0" skipped="0" time="0.0439997">
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; discoverTools &gt; should discover tools" time="0.0051287">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; discoverTools &gt; should log an error if there is an error discovering a tool" time="0.0033662">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; discoverPrompts &gt; should discover and log prompts" time="0.0042637">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; discoverPrompts &gt; should do nothing if no prompts are discovered" time="0.0014378">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; discoverPrompts &gt; should log an error if discovery fails" time="0.0012283">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should do nothing if no MCP servers or command are configured" time="0.0007827">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should discover tools via mcpServerCommand" time="0.0014841">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should handle error if mcpServerCommand parsing fails" time="0.0019891">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via httpUrl &gt; without headers" time="0.0023773">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via httpUrl &gt; with headers" time="0.0010478">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via url &gt; without headers" time="0.0009512">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via url &gt; with headers" time="0.0039399">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via command" time="0.0019349">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; useGoogleCredentialProvider &gt; should use GoogleCredentialProvider when specified" time="0.0013357">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; useGoogleCredentialProvider &gt; should use GoogleCredentialProvider with SSE transport" time="0.0012629">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; useGoogleCredentialProvider &gt; should throw an error if no URL is provided with GoogleCredentialProvider" time="0.0023306">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if no include or exclude lists are provided" time="0.0007147">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the tool is in the exclude list" time="0.0004439">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if the tool is in the include list" time="0.000436">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if the tool is in the include list with parentheses" time="0.0004661">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the include list exists but does not contain the tool" time="0.0004554">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the tool is in both the include and exclude lists" time="0.0003989">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the function declaration has no name" time="0.0032585">
            <system-err>
Discovered a function declaration without a name from MCP server &apos;myServer&apos;. Skipping.

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/tools/mcp-tool.test.ts" timestamp="2025-07-31T16:52:10.422Z" hostname="Involvex" tests="20" failures="0" errors="0" skipped="0" time="0.0274904">
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should return a valid name for a simple function" time="0.005065">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should replace invalid characters with underscores" time="0.0003204">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should truncate long names" time="0.0001587">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should handle names with only invalid characters" time="0.0001323">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should handle names that are exactly 63 characters long" time="0.0001346">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should handle names that are exactly 64 characters long" time="0.0001629">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should handle names that are longer than 64 characters" time="0.0001803">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; constructor &gt; should set properties correctly" time="0.0042198">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; constructor &gt; should accept and store a custom timeout" time="0.0003239">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should call mcpTool.callTool with correct parameters and format display output" time="0.0040723">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle empty result from getStringifiedResultForDisplay" time="0.0020487">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should propagate rejection if mcpTool.callTool rejects" time="0.0026147">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if trust is true" time="0.0005516">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if server is allowlisted" time="0.0005883">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if tool is allowlisted" time="0.0008375">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return confirmation details if not trusted and not allowlisted" time="0.0007">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should add server to allowlist on ProceedAlwaysServer" time="0.0007402">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should add tool to allowlist on ProceedAlwaysTool" time="0.0003839">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should handle Cancel confirmation outcome" time="0.0003465">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should handle ProceedOnce confirmation outcome" time="0.000314">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/memoryTool.test.ts" timestamp="2025-07-31T16:52:10.426Z" hostname="Involvex" tests="19" failures="0" errors="0" skipped="0" time="0.0460299">
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should update currentGeminiMdFilename when a valid new name is provided" time="0.0038208">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should not update currentGeminiMdFilename if the new name is empty or whitespace" time="0.0005582">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should handle an array of filenames" time="0.0015737">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should create section and save a fact if file does not exist" time="0.0034361">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should create section and save a fact if file is empty" time="0.0004328">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact to an existing section" time="0.0004008">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact to an existing empty section" time="0.0003648">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact when other ## sections exist and preserve spacing" time="0.0006561">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should correctly trim and add a fact that starts with a dash" time="0.0003332">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should handle error from fsAdapter.writeFile" time="0.0137579">
            <system-err>
[MemoryTool] Error adding memory entry to \mock\home\.gemini\GEMINI.md: Error: Disk full
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\tools\memoryTool.test.ts:175:49
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should have correct name, displayName, description, and schema" time="0.0011459">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should call performAddMemoryEntry with correct parameters and return success" time="0.000983">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should return an error if fact is empty" time="0.0006455">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should handle errors from performAddMemoryEntry" time="0.0008031">
            <system-err>
[MemoryTool] Error executing save_memory for fact &quot;This will fail&quot;: [MemoryTool] Failed to add memory entry: Disk full

            </system-err>
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should return confirmation details when memory file is not allowlisted" time="0.0045064">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should return false when memory file is already allowlisted" time="0.0004234">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should add memory file to allowlist when ProceedAlways is confirmed" time="0.0007855">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should not add memory file to allowlist when other outcomes are confirmed" time="0.0009141">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should handle existing memory file with content" time="0.0069006">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/modifiable-tool.test.ts" timestamp="2025-07-31T16:52:10.429Z" hostname="Involvex" tests="11" failures="0" errors="0" skipped="0" time="0.2301878">
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should successfully modify content with VSCode editor" time="0.0237301">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should create temp directory if it does not exist" time="0.0105405">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should not create temp directory if it already exists" time="0.0181024">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle missing old temp file gracefully" time="0.0208515">
            <system-err>
Error deleting temp diff file: C:\Users\lukas\AppData\Local\Temp\gemini-cli-tool-modify-diffs\gemini-cli-modify-test-old-1753980716566.txt

            </system-err>
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle missing new temp file gracefully" time="0.0104863">
            <system-err>
Error deleting temp diff file: C:\Users\lukas\AppData\Local\Temp\gemini-cli-tool-modify-diffs\gemini-cli-modify-test-new-1753980716586.txt

            </system-err>
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should clean up temp files even if editor fails" time="0.0107008">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle temp file cleanup errors gracefully" time="0.1036089">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should create temp files with correct naming with extension" time="0.0194787">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should create temp files with correct naming without extension" time="0.0084236">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="isModifiableTool &gt; should return true for objects with getModifyContext method" time="0.0008754">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="isModifiableTool &gt; should return false for objects without getModifyContext method" time="0.0002853">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/read-file.test.ts" timestamp="2025-07-31T16:52:10.432Z" hostname="Involvex" tests="20" failures="0" errors="0" skipped="0" time="0.2747972">
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return null for valid params (absolute path within root)" time="0.0631138">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return null for valid params with offset and limit" time="0.0072584">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for relative path" time="0.0351702">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for path outside root" time="0.0129842">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for negative offset" time="0.01364">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for non-positive limit" time="0.0266091">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for schema validation failure (e.g. missing path)" time="0.0175952">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should return a shortened, relative path" time="0.0024833">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should return . if path is the root directory" time="0.0025329">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return validation error if params are invalid" time="0.0053339">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return error if file does not exist" time="0.006093">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return success result for a text file" time="0.0166025">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return success result for an image file" time="0.0080082">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should treat a non-image file with image extension as an image" time="0.0072644">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should pass offset and limit to read a slice of a text file" time="0.0088287">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; with .geminiignore &gt; should return error if path is ignored by a .geminiignore pattern" time="0.0096784">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; with .geminiignore &gt; should return error if path is in an ignored directory" time="0.0133194">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; workspace boundary validation &gt; should validate paths are within workspace root" time="0.0066021">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; workspace boundary validation &gt; should reject paths outside workspace root" time="0.0041723">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; workspace boundary validation &gt; should provide clear error message with workspace directories" time="0.0040922">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/read-many-files.test.ts" timestamp="2025-07-31T16:52:10.436Z" hostname="Involvex" tests="23" failures="0" errors="0" skipped="0" time="2.5033778">
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for valid relative paths within root" time="0.0811759">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for valid glob patterns within root" time="0.0125145">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for paths trying to escape the root (e.g., ../) as execute handles this" time="0.0754601">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for absolute paths as execute handles this" time="0.0206071">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if paths array is empty" time="0.0177735">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for valid exclude and include patterns" time="0.0190507">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if paths array contains an empty string" time="0.018334">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if include array contains non-string elements" time="0.1924513">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if exclude array contains non-string elements" time="0.0223274">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read a single specified file" time="0.141245">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read multiple specified files" time="0.4029881">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should handle glob patterns" time="0.1181857">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should respect exclude patterns" time="0.023061">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should handle nonexistent specific files gracefully" time="0.0252076">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should use default excludes" time="0.2929342">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should NOT use default excludes if useDefaultExcludes is false" time="0.06951">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include images as inlineData parts if explicitly requested by extension" time="0.0257626">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include images as inlineData parts if explicitly requested by name" time="0.0278585">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should skip PDF files if not explicitly requested by extension or name" time="0.3543875">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include PDF files as inlineData parts if explicitly requested by extension" time="0.0230361">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include PDF files as inlineData parts if explicitly requested by name" time="0.1077281">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should return error if path is ignored by a .geminiignore pattern" time="0.1857843">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read files from multiple workspace directories" time="0.2399016">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/shell.test.ts" timestamp="2025-07-31T16:52:10.440Z" hostname="Involvex" tests="16" failures="0" errors="0" skipped="0" time="0.3029956">
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; isCommandAllowed &gt; should allow a command if no restrictions are provided" time="0.0092108">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; isCommandAllowed &gt; should block a command with command substitution using $()" time="0.0031343">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; validateToolParams &gt; should return null for a valid command" time="0.0999389">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; validateToolParams &gt; should return an error for an empty command" time="0.0045023">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; validateToolParams &gt; should return an error for a non-existent directory" time="0.0050642">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should wrap command on linux and parse pgrep output" time="0.0733728">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should not wrap command on windows" time="0.0122839">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should format error messages correctly" time="0.0072643">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should summarize output when configured" time="0.0096045">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should clean up the temp file on synchronous execution error" time="0.0105004">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; Streaming to `updateOutput` &gt; should throttle text output updates" time="0.0167992">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; Streaming to `updateOutput` &gt; should immediately show binary detection message and throttle progress" time="0.0116848">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; shouldConfirmExecute &gt; should request confirmation for a new command and whitelist it on &quot;Always&quot;" time="0.0210963">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; shouldConfirmExecute &gt; should skip confirmation if validation fails" time="0.0050627">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="validateToolParams &gt; should return null for valid directory" time="0.0021719">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="validateToolParams &gt; should return error for directory outside workspace" time="0.0066914">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/tool-registry.test.ts" timestamp="2025-07-31T16:52:10.443Z" hostname="Involvex" tests="18" failures="0" errors="0" skipped="0" time="0.2343013">
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; registerTool &gt; should register a new tool" time="0.1614719">
            <system-out>
Error reading cached Google Account: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getCachedGoogleAccount [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:62:53[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:84:19[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\tools\tool-registry.test.ts:156:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)
Error reading lifetime Google Accounts: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getLifetimeGoogleAccounts [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:83:51[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:85:27[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\tools\tool-registry.test.ts:156:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)

            </system-out>
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at readInstallationIdFromFile [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:25:71[90m)[39m
    at getInstallationId [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:43:26[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:103:36[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\tools\tool-registry.test.ts:156:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)

            </system-err>
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getAllTools &gt; should return all registered tools sorted alphabetically by displayName" time="0.0239843">
            <system-out>
Error reading cached Google Account: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getCachedGoogleAccount [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:62:53[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:84:19[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\tools\tool-registry.test.ts:156:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)
Error reading lifetime Google Accounts: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getLifetimeGoogleAccounts [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:83:51[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:85:27[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\tools\tool-registry.test.ts:156:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)

            </system-out>
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at readInstallationIdFromFile [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:25:71[90m)[39m
    at getInstallationId [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:43:26[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:103:36[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\tools\tool-registry.test.ts:156:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)

            </system-err>
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getToolsByServer &gt; should return an empty array if no tools match the server name" time="0.0049063">
            <system-out>
Error reading cached Google Account: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getCachedGoogleAccount [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:62:53[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:84:19[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\tools\tool-registry.test.ts:156:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)
Error reading lifetime Google Accounts: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getLifetimeGoogleAccounts [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:83:51[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:85:27[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\tools\tool-registry.test.ts:156:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)

            </system-out>
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at readInstallationIdFromFile [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:25:71[90m)[39m
    at getInstallationId [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:43:26[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:103:36[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\tools\tool-registry.test.ts:156:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)

            </system-err>
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getToolsByServer &gt; should return only tools matching the server name, sorted by name" time="0.0118412">
            <system-out>
Error reading cached Google Account: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getCachedGoogleAccount [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:62:53[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:84:19[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\tools\tool-registry.test.ts:156:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)
Error reading lifetime Google Accounts: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getLifetimeGoogleAccounts [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:83:51[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:85:27[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\tools\tool-registry.test.ts:156:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)

            </system-out>
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at readInstallationIdFromFile [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:25:71[90m)[39m
    at getInstallationId [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:43:26[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:103:36[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\tools\tool-registry.test.ts:156:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)

            </system-err>
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should sanitize tool parameters during discovery from command" time="0.0109403">
            <system-out>
Error reading cached Google Account: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getCachedGoogleAccount [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:62:53[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:84:19[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\tools\tool-registry.test.ts:156:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)
Error reading lifetime Google Accounts: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getLifetimeGoogleAccounts [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:83:51[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:85:27[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\tools\tool-registry.test.ts:156:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)

            </system-out>
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at readInstallationIdFromFile [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:25:71[90m)[39m
    at getInstallationId [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:43:26[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:103:36[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\tools\tool-registry.test.ts:156:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)

            </system-err>
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should discover tools using MCP servers defined in getMcpServers" time="0.0070239">
            <system-out>
Error reading cached Google Account: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getCachedGoogleAccount [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:62:53[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:84:19[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\tools\tool-registry.test.ts:156:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)
Error reading lifetime Google Accounts: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getLifetimeGoogleAccounts [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:83:51[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:85:27[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\tools\tool-registry.test.ts:156:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)

            </system-out>
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at readInstallationIdFromFile [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:25:71[90m)[39m
    at getInstallationId [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:43:26[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:103:36[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\tools\tool-registry.test.ts:156:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)

            </system-err>
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should discover tools using MCP servers defined in getMcpServers" time="0.0053808">
            <system-out>
Error reading cached Google Account: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getCachedGoogleAccount [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:62:53[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:84:19[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\tools\tool-registry.test.ts:156:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)
Error reading lifetime Google Accounts: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getLifetimeGoogleAccounts [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:83:51[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:85:27[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\tools\tool-registry.test.ts:156:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)

            </system-out>
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at readInstallationIdFromFile [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:25:71[90m)[39m
    at getInstallationId [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:43:26[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:103:36[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\tools\tool-registry.test.ts:156:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)

            </system-err>
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should remove default when anyOf is present" time="0.0005104">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should recursively sanitize items in anyOf" time="0.0002153">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should recursively sanitize items in items" time="0.0002011">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should recursively sanitize items in properties" time="0.0003267">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should handle complex nested schemas" time="0.000253">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should remove unsupported format from a simple string property" time="0.0007146">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should NOT remove supported format values" time="0.0003521">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should handle arrays of objects" time="0.0002166">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should handle schemas with no properties to sanitize" time="0.0002337">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should not crash on an empty or undefined schema" time="0.0020078">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="sanitizeParameters &gt; should handle complex nested schemas with cycles" time="0.0011124">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/web-fetch.test.ts" timestamp="2025-07-31T16:52:10.448Z" hostname="Involvex" tests="4" failures="0" errors="0" skipped="0" time="0.0751071">
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should return confirmation details with the correct prompt and urls" time="0.0684421">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should convert github urls to raw format" time="0.001329">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should return false if approval mode is AUTO_EDIT" time="0.0003673">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should call setApprovalMode when onConfirm is called with ProceedAlways" time="0.0028903">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/write-file.test.ts" timestamp="2025-07-31T16:52:10.449Z" hostname="Involvex" tests="24" failures="0" errors="0" skipped="0" time="0.3319303">
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return null for valid absolute path within root" time="0.0590052">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return error for relative path" time="0.0048174">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return error for path outside root" time="0.0036891">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return error if path is a directory" time="0.0058639">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; _getCorrectedFileContent &gt; should call ensureCorrectFileContent for a new file" time="0.009373">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; _getCorrectedFileContent &gt; should call ensureCorrectEdit for an existing file" time="0.006213">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; _getCorrectedFileContent &gt; should return error if reading an existing file fails (e.g. permissions)" time="0.0044539">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if params are invalid (relative path)" time="0.0056348">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if params are invalid (outside root)" time="0.0065864">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if _getCorrectedFileContent returns an error" time="0.0066316">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should request confirmation with diff for a new file (with corrected content)" time="0.0109958">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should request confirmation with diff for an existing file (with corrected content)" time="0.0076833">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should return error if params are invalid (relative path)" time="0.0083377">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should return error if params are invalid (path outside root)" time="0.0044548">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should return error if _getCorrectedFileContent returns an error during execute" time="0.0085401">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should write a new file with corrected content and return diff" time="0.0147375">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should overwrite an existing file with corrected content and return diff" time="0.0203236">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should create directory if it does not exist" time="0.0397662">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should include modification message when proposed content is modified" time="0.0560301">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should not include modification message when proposed content is not modified" time="0.0217918">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should not include modification message when modified_by_user is not provided" time="0.0062679">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; workspace boundary validation &gt; should validate paths are within workspace root" time="0.0051858">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; workspace boundary validation &gt; should reject paths outside workspace root" time="0.0050718">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; workspace boundary validation &gt; should provide clear error message with workspace directories" time="0.0068158">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/bfsFileSearch.test.ts" timestamp="2025-07-31T16:52:10.454Z" hostname="Involvex" tests="11" failures="1" errors="0" skipped="0" time="0.659199">
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find a file in the root directory" time="0.0157269">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find a file in a nested directory" time="0.0061807">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find multiple files with the same name" time="0.0099029">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should return an empty array if no file is found" time="0.0041185">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should ignore directories specified in ignoreDirs" time="0.0065981">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should respect the maxDirs limit and not find the file" time="0.0093308">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should respect the maxDirs limit and find the file" time="0.0106144">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; with FileDiscoveryService &gt; should ignore gitignored files" time="0.0304255">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; with FileDiscoveryService &gt; should ignore geminiignored files" time="0.0243844">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; with FileDiscoveryService &gt; should not ignore files if respect flags are false" time="0.0212069">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should perform parallel directory scanning efficiently (performance test)" time="0.5174615">
            <system-out>

🚀 Testing Parallel BFS Performance...

📊 Iteration 1: 92.87ms

📊 Iteration 2: 9.88ms

📊 Iteration 3: 13.29ms
📊 Average Duration: 38.68ms
📊 Min/Max Duration: 9.88ms / 92.87ms
📁 Found 20 GEMINI.md files
🏎️  Processing ~5171 dirs/second

            </system-out>
            <failure message="expected 2.145552586198732 to be less than 1.5" type="AssertionError">
AssertionError: expected 2.145552586198732 to be less than 1.5
 ❯ src/utils/bfsFileSearch.test.ts:261:30
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/editCorrector.test.ts" timestamp="2025-07-31T16:52:10.457Z" hostname="Involvex" tests="40" failures="0" errors="0" skipped="0" time="0.0490787">
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 0 for empty string" time="0.0026992">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 0 for empty substring" time="0.0002486">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 0 if substring is not found" time="0.0002396">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 1 if substring is found once" time="0.0002749">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return correct count for multiple occurrences" time="0.0001646">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should count non-overlapping occurrences" time="0.0001608">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should correctly count occurrences when substring is longer" time="0.000123">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should be case-sensitive" time="0.0001461">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should unescape common sequences" time="0.0004158">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle multiple escaped sequences" time="0.0001513">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should not alter already correct sequences" time="0.0001852">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle mixed correct and incorrect sequences" time="0.0001432">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle backslash followed by actual newline character" time="0.0002885">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle multiple backslashes before an escapable character (aggressive unescaping)" time="0.0002539">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should return empty string for empty input" time="0.0002306">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should not alter strings with no targeted escape sequences" time="0.0001936">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should correctly process strings with some targeted escapes" time="0.000144">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle complex cases with mixed slashes and characters" time="0.0001486">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle escaped backslashes" time="0.0002279">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle escaped backslashes mixed with other escapes (aggressive unescaping)" time="0.0001818">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.1: old_string (no literal \), new_string (escaped by Gemini) -&gt; new_string unescaped" time="0.0046695">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.2: old_string (no literal \), new_string (correctly formatted) -&gt; new_string unchanged" time="0.0013246">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.3: old_string (with literal \), new_string (escaped by Gemini) -&gt; new_string unchanged (still escaped)" time="0.0013527">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.4: old_string (with literal \), new_string (correctly formatted) -&gt; new_string unchanged" time="0.001549">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.1: old_string (over-escaped, no intended literal \), new_string (escaped by Gemini) -&gt; new_string unescaped" time="0.0015266">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.2: old_string (over-escaped, no intended literal \), new_string (correctly formatted) -&gt; new_string unescaped (harmlessly)" time="0.0015551">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.3: old_string (over-escaped, with intended literal \), new_string (simple) -&gt; new_string corrected" time="0.001696">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.1: old_string (no literal \), new_string (escaped by Gemini), LLM re-escapes new_string -&gt; final new_string is double unescaped" time="0.0026861">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.2: old_string (with literal \), new_string (escaped by Gemini), LLM re-escapes new_string -&gt; final new_string is unescaped once" time="0.0020377">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.3: old_string needs LLM, new_string is fine -&gt; old_string corrected, new_string original" time="0.001676">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.4: LLM correction path, correctNewString returns the originalNewString it was passed (which was unescaped) -&gt; final new_string is unescaped" time="0.0019238">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 4: No Match Found / Multiple Matches &gt; Test 4.1: No version of old_string (original, unescaped, LLM-corrected) matches -&gt; returns original params, 0 occurrences" time="0.0028453">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 4: No Match Found / Multiple Matches &gt; Test 4.2: unescapedOldStringAttempt results in &gt;1 occurrences -&gt; returns original params, count occurrences" time="0.0016925">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 5: Specific unescapeStringForGeminiBug checks (integrated into ensureCorrectEdit) &gt; Test 5.1: old_string needs LLM to become currentContent, new_string also needs correction" time="0.0026101">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 6: Concurrent Edits &gt; Test 6.1: should return early if file was modified by another process" time="0.0018024">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should return content unchanged if no escaping issues detected" time="0.0013475">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should call correctStringEscaping for potentially escaped content" time="0.0016456">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should handle correctStringEscaping returning corrected content via correct property name" time="0.0018939">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should return original content if LLM correction fails" time="0.0019288">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should handle various escape sequences that need correction" time="0.0013446">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/editor.test.ts" timestamp="2025-07-31T16:52:10.464Z" hostname="Involvex" tests="95" failures="0" errors="0" skipped="0" time="0.0542821">
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return true if first command &quot;code&quot; exists on non-windows" time="0.0067205">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return false if none of the commands exist on non-windows" time="0.0004601">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return true if first command &quot;code.cmd&quot; exists on windows" time="0.0004967">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return false if none of the commands exist on windows" time="0.000516">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return true if first command &quot;codium&quot; exists on non-windows" time="0.0003434">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return false if none of the commands exist on non-windows" time="0.0003181">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return true if first command &quot;codium.cmd&quot; exists on windows" time="0.0003041">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return false if none of the commands exist on windows" time="0.0002388">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return true if first command &quot;windsurf&quot; exists on non-windows" time="0.0003203">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return false if none of the commands exist on non-windows" time="0.0002732">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return true if first command &quot;windsurf&quot; exists on windows" time="0.0004068">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return false if none of the commands exist on windows" time="0.0002585">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return true if first command &quot;cursor&quot; exists on non-windows" time="0.000331">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return false if none of the commands exist on non-windows" time="0.0003131">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return true if first command &quot;cursor&quot; exists on windows" time="0.0003728">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return false if none of the commands exist on windows" time="0.000276">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return true if first command &quot;vim&quot; exists on non-windows" time="0.0003111">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return false if none of the commands exist on non-windows" time="0.0002225">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return true if first command &quot;vim&quot; exists on windows" time="0.0003091">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return false if none of the commands exist on windows" time="0.0002736">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return true if first command &quot;nvim&quot; exists on non-windows" time="0.0002992">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return false if none of the commands exist on non-windows" time="0.0002451">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return true if first command &quot;nvim&quot; exists on windows" time="0.0002978">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return false if none of the commands exist on windows" time="0.0002642">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if first command &quot;zed&quot; exists on non-windows" time="0.0015275">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if first command doesn&apos;t exist but second command &quot;zeditor&quot; exists on non-windows" time="0.00052">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return false if none of the commands exist on non-windows" time="0.0003387">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if first command &quot;zed&quot; exists on windows" time="0.0003823">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return false if none of the commands exist on windows" time="0.0002333">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;code&quot; when it exists on non-windows" time="0.0005679">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;code&quot; when none exist on non-windows" time="0.0003284">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;code.cmd&quot; when it exists on windows" time="0.0003246">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;code.cmd&quot; when none exist on windows" time="0.0003297">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;codium&quot; when it exists on non-windows" time="0.0002425">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;codium&quot; when none exist on non-windows" time="0.0002285">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;codium.cmd&quot; when it exists on windows" time="0.0003374">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;codium.cmd&quot; when none exist on windows" time="0.000233">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;windsurf&quot; when it exists on non-windows" time="0.0002451">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;windsurf&quot; when none exist on non-windows" time="0.0002794">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;windsurf&quot; when it exists on windows" time="0.00027">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;windsurf&quot; when none exist on windows" time="0.0002373">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;cursor&quot; when it exists on non-windows" time="0.0002254">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;cursor&quot; when none exist on non-windows" time="0.0002276">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;cursor&quot; when it exists on windows" time="0.0002503">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;cursor&quot; when none exist on windows" time="0.0013654">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;zed&quot; when it exists on non-windows" time="0.0006595">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use second command &quot;zeditor&quot; when first doesn&apos;t exist on non-windows" time="0.0004375">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;zeditor&quot; when none exist on non-windows" time="0.0002553">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;zed&quot; when it exists on windows" time="0.0002283">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;zed&quot; when none exist on windows" time="0.0002053">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vim" time="0.0003367">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for neovim" time="0.0002531">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return null for an unsupported editor" time="0.000282">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for vscode" time="0.0031147">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for vscode fails" time="0.0027126">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if vscode exits with non-zero code" time="0.0007108">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for vscodium" time="0.0007152">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for vscodium fails" time="0.0008206">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if vscodium exits with non-zero code" time="0.0004186">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for windsurf" time="0.0005865">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for windsurf fails" time="0.0005219">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if windsurf exits with non-zero code" time="0.0004028">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for cursor" time="0.0005602">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for cursor fails" time="0.0003821">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if cursor exits with non-zero code" time="0.0003708">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for zed" time="0.0005877">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for zed fails" time="0.0004211">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if zed exits with non-zero code" time="0.0004003">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for vim on non-windows" time="0.0006833">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for vim on windows" time="0.0004599">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for neovim on non-windows" time="0.0003601">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for neovim on windows" time="0.0004377">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should log an error if diff command is not available" time="0.0006878">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vim in sandbox mode" time="0.0005484">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vim when not in sandbox mode" time="0.0004552">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow neovim in sandbox mode" time="0.0003882">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow neovim when not in sandbox mode" time="0.0003063">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow vscode in sandbox mode" time="0.0002841">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vscode when not in sandbox mode" time="0.0003122">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow vscodium in sandbox mode" time="0.0002529">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vscodium when not in sandbox mode" time="0.0002114">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow windsurf in sandbox mode" time="0.000195">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow windsurf when not in sandbox mode" time="0.0001739">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow cursor in sandbox mode" time="0.0017143">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow cursor when not in sandbox mode" time="0.0003131">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow zed in sandbox mode" time="0.0002981">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow zed when not in sandbox mode" time="0.0002676">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for undefined editor" time="0.0002942">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for empty string editor" time="0.000255">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for invalid editor type" time="0.0002882">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for vscode when installed and not in sandbox mode" time="0.0003199">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for vscode when not installed and not in sandbox mode" time="0.0003917">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for vscode when installed and in sandbox mode" time="0.0012238">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for vim when installed and in sandbox mode" time="0.0003615">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for neovim when installed and in sandbox mode" time="0.0005107">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/errorReporting.test.ts" timestamp="2025-07-31T16:52:10.480Z" hostname="Involvex" tests="6" failures="0" errors="0" skipped="0" time="0.2100119">
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should generate a report and log the path" time="0.0288114">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle errors that are plain objects with a message property" time="0.0088107">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle string errors" time="0.0082515">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should log fallback message if writing report fails" time="0.0215948">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle stringification failure of report content (e.g. BigInt in context)" time="0.0132854">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should generate a report without context if context is not provided" time="0.1260012">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/fileUtils.test.ts" timestamp="2025-07-31T16:52:10.482Z" hostname="Involvex" tests="36" failures="0" errors="0" skipped="0" time="0.4524754">
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return true for paths directly within the root" time="0.0060784">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return true for the root path itself" time="0.0021705">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for paths outside the root" time="0.0024271">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for paths that only partially match the root prefix" time="0.0020823">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should handle paths with trailing slashes correctly" time="0.0022433">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should handle different path separators (POSIX vs Windows)" time="0.0019268">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for a root path that is a sub-path of the path to check" time="0.0018542">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false for an empty file" time="0.0036889">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false for a typical text file" time="0.0035446">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return true for a file with many null bytes" time="0.0033052">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return true for a file with high percentage of non-printable ASCII" time="0.0045109">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false if file access fails (e.g., ENOENT)" time="0.008129">
            <system-err>
Failed to check if file is binary: C:\Users\lukas\AppData\Local\Temp\fileUtils-test-cdFFdx\binaryCheck.tmp ENOENT: no such file or directory, open &apos;C:\Users\lukas\AppData\Local\Temp\fileUtils-test-cdFFdx\binaryCheck.tmp&apos;

            </system-err>
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect typescript type by extension (ts)" time="0.0057643">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect image type by extension (png)" time="0.0026752">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect image type by extension (jpeg)" time="0.0039302">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect svg type by extension" time="0.0030268">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect pdf type by extension" time="0.0025394">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect audio type by extension" time="0.0025539">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect video type by extension" time="0.002363">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect known binary extensions as binary (e.g. .zip)" time="0.0024688">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect known binary extensions as binary (e.g. .exe)" time="0.0023638">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should use isBinaryFile for unknown extensions and detect as binary" time="0.0170897">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should default to text if mime type is unknown and content is not binary" time="0.0189675">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should read a text file successfully" time="0.0593508">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle file not found" time="0.0032308">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle read errors for text files" time="0.0096455">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle read errors for image/pdf files" time="0.0036582">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should process an image file" time="0.0042691">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should process a PDF file" time="0.0071195">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should read an SVG file as text when under 1MB" time="0.0226364">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should skip binary files" time="0.0460962">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle path being a directory" time="0.0038612">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should paginate text files correctly (offset and limit)" time="0.0811038">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle limit exceeding file length" time="0.0276637">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should truncate long lines in text files" time="0.0259281">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should return an error if the file size exceeds 20MB" time="0.047931">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/flashFallback.integration.test.ts" timestamp="2025-07-31T16:52:10.488Z" hostname="Involvex" tests="4" failures="0" errors="0" skipped="0" time="0.3569723">
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should automatically accept fallback" time="0.0907884">
            <system-out>
Error reading cached Google Account: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getCachedGoogleAccount [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:62:53[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:84:19[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\flashFallback.integration.test.ts:32:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)
Error reading lifetime Google Accounts: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getLifetimeGoogleAccounts [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:83:51[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:85:27[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\flashFallback.integration.test.ts:32:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)

            </system-out>
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at readInstallationIdFromFile [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:25:71[90m)[39m
    at getInstallationId [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:43:26[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:103:36[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\flashFallback.integration.test.ts:32:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)

            </system-err>
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should trigger fallback after 2 consecutive 429 errors for OAuth users" time="0.0641234">
            <system-out>
Error reading cached Google Account: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getCachedGoogleAccount [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:62:53[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:84:19[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\flashFallback.integration.test.ts:32:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)
Error reading lifetime Google Accounts: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getLifetimeGoogleAccounts [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:83:51[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:85:27[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\flashFallback.integration.test.ts:32:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)

            </system-out>
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at readInstallationIdFromFile [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:25:71[90m)[39m
    at getInstallationId [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:43:26[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:103:36[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\flashFallback.integration.test.ts:32:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)

Attempt 1 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at Module.createSimulated429Error [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\testUtils.ts:59:17[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\flashFallback.integration.test.ts:69:30
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should not trigger fallback for API key users" time="0.1967695">
            <system-out>
Error reading cached Google Account: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getCachedGoogleAccount [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:62:53[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:84:19[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\flashFallback.integration.test.ts:32:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)
Error reading lifetime Google Accounts: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getLifetimeGoogleAccounts [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:83:51[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:85:27[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\flashFallback.integration.test.ts:32:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)

            </system-out>
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at readInstallationIdFromFile [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:25:71[90m)[39m
    at getInstallationId [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:43:26[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:103:36[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\flashFallback.integration.test.ts:32:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)

Attempt 1 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at Module.createSimulated429Error [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\testUtils.ts:59:17[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\flashFallback.integration.test.ts:109:51
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

Attempt 2 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at Module.createSimulated429Error [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\testUtils.ts:59:17[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\flashFallback.integration.test.ts:109:51
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

Attempt 3 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at Module.createSimulated429Error [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\testUtils.ts:59:17[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\flashFallback.integration.test.ts:109:51
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

Attempt 4 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at Module.createSimulated429Error [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\testUtils.ts:59:17[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\flashFallback.integration.test.ts:109:51
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should properly disable simulation state after fallback" time="0.0029339">
            <system-out>
Error reading cached Google Account: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getCachedGoogleAccount [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:62:53[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:84:19[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\flashFallback.integration.test.ts:32:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)
Error reading lifetime Google Accounts: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at getLifetimeGoogleAccounts [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_account.ts:83:51[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:85:27[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\flashFallback.integration.test.ts:32:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runHook (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1436:51)

            </system-out>
            <system-err>
Error accessing installation ID file, generating ephemeral ID: TypeError: Cannot read properties of undefined (reading &apos;trim&apos;)
    at readInstallationIdFromFile [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:25:71[90m)[39m
    at getInstallationId [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\user_id.ts:43:26[90m)[39m
    at ClearcutLogger.createLogEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:103:36[90m)[39m
    at ClearcutLogger.logStartSessionEvent [90m(D:\repos\gemini-cli\packages\core\[39msrc\telemetry\clearcut-logger\clearcut-logger.ts:309:31[90m)[39m
    at new Config [90m(D:\repos\gemini-cli\packages\core\[39msrc\config\config.ts:320:41[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\flashFallback.integration.test.ts:32:14
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/generateContentResponseUtilities.test.ts" timestamp="2025-07-31T16:52:10.491Z" hostname="Involvex" tests="36" failures="0" errors="0" skipped="0" time="0.0155485">
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined for no candidates" time="0.002659">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined for empty candidates array" time="0.0003235">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined for no parts" time="0.0004973">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should extract text from a single text part" time="0.0005671">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should concatenate text from multiple text parts" time="0.0003541">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should ignore function call parts" time="0.000216">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined if only function call parts exist" time="0.0001891">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should return undefined for no parts" time="0.0002357">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should extract text from a single text part" time="0.0002545">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should concatenate text from multiple text parts" time="0.0001776">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should ignore function call parts" time="0.0001669">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should return undefined if only function call parts exist" time="0.0001667">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for no candidates" time="0.0002822">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for empty candidates array" time="0.0001865">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for no parts" time="0.0001718">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should extract a single function call" time="0.001352">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should extract multiple function calls" time="0.0003083">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should ignore text parts" time="0.0002703">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined if only text parts exist" time="0.0002142">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should return undefined for no parts" time="0.0002448">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should extract a single function call" time="0.0002682">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should extract multiple function calls" time="0.0002739">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should ignore text parts" time="0.0003722">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should return undefined if only text parts exist" time="0.0002078">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsAsJson &gt; should return JSON string of function calls" time="0.0002932">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsAsJson &gt; should return undefined if no function calls" time="0.0001883">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromPartsAsJson &gt; should return JSON string of function calls from parts" time="0.0002918">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromPartsAsJson &gt; should return undefined if no function calls in parts" time="0.0001869">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return only text if only text exists" time="0.0002186">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return only function call JSON if only function calls exist" time="0.0002012">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return text and function call JSON if both exist" time="0.0001765">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return undefined if neither text nor function calls exist" time="0.0001475">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return only text if only text exists in parts" time="0.0001924">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return only function call JSON if only function calls exist in parts" time="0.0001758">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return text and function call JSON if both exist in parts" time="0.0002412">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return undefined if neither text nor function calls exist in parts" time="0.0002016">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/getFolderStructure.test.ts" timestamp="2025-07-31T16:52:10.497Z" hostname="Involvex" tests="15" failures="0" errors="0" skipped="0" time="0.4049389">
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should return basic folder structure" time="0.0549442">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle an empty folder" time="0.0111075">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should ignore folders specified in ignoredFolders (default)" time="0.070148">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should ignore folders specified in custom ignoredFolders" time="0.061755">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should filter files by fileIncludePattern" time="0.0291436">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems truncation for files within a folder" time="0.0134284">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems truncation for subfolders" time="0.0264594">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems that only allows the root folder itself" time="0.0117109">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle non-existent directory" time="0.0042028">
            <system-err>
Warning: Could not read directory C:\Users\lukas\AppData\Local\Temp\folder-structure-test-vO50Yh\non-existent: ENOENT: no such file or directory, scandir &apos;C:\Users\lukas\AppData\Local\Temp\folder-structure-test-vO50Yh\non-existent&apos;

            </system-err>
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle deep folder structure within limits" time="0.0135912">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should truncate deep folder structure if maxItems is small" time="0.0158753">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; with gitignore &gt; should ignore files and folders specified in .gitignore" time="0.0215907">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; with gitignore &gt; should not ignore files if respectGitIgnore is false" time="0.0094813">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; with geminiignore &gt; should ignore geminiignore files by default" time="0.033482">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; with geminiignore &gt; should not ignore files if respectGeminiIgnore is false" time="0.0241318">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/gitIgnoreParser.test.ts" timestamp="2025-07-31T16:52:10.500Z" hostname="Involvex" tests="18" failures="0" errors="0" skipped="0" time="0.1396268">
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should initialize without errors when no .gitignore exists" time="0.0172611">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should load .gitignore patterns when file exists" time="0.0100016">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should handle git exclude file" time="0.0066035">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should handle custom patterns file name" time="0.0053808">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should initialize without errors when no .geminiignore exists" time="0.001555">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should always ignore .git directory" time="0.0068059">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should ignore files matching patterns" time="0.0064962">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should ignore files with path-specific patterns" time="0.0082667">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle negation patterns" time="0.0070277">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should not ignore files that do not match patterns" time="0.0068352">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle absolute paths correctly" time="0.0092745">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle paths outside project root by not ignoring them" time="0.0080775">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle relative paths correctly" time="0.0085976">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should normalize path separators on Windows" time="0.0064364">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle root path &quot;/&quot; without throwing error" time="0.007438">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle absolute-like paths without throwing error" time="0.0066392">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle paths that start with forward slash" time="0.0068795">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; getIgnoredPatterns &gt; should return the raw patterns added" time="0.0072402">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/memoryDiscovery.test.ts" timestamp="2025-07-31T16:52:10.504Z" hostname="Involvex" tests="11" failures="0" errors="0" skipped="0" time="1.1116474">
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should return empty memory and count if no context files are found" time="0.0208827">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load only the global context file if present and others are not (default filename)" time="0.0321685">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load only the global custom context file if present and filename is changed" time="0.0234652">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load context files by upward traversal with custom filename" time="0.0319644">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load context files by downward traversal with custom filename" time="0.0174787">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load ORIGINAL_GEMINI_MD_FILENAME files by upward traversal from CWD to project root" time="0.0230325">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load ORIGINAL_GEMINI_MD_FILENAME files by downward traversal from CWD" time="0.0290451">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load and correctly order global, upward, and downward ORIGINAL_GEMINI_MD_FILENAME files" time="0.7659623">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should ignore specified directories during downward scan" time="0.0242541">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should respect the maxDirs parameter during downward scan" time="0.1158973">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load extension context file paths" time="0.02484">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/memoryImportProcessor.test.ts" timestamp="2025-07-31T16:52:10.505Z" hostname="Involvex" tests="14" failures="0" errors="0" skipped="0" time="0.0173601">
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should process basic md file imports" time="0.0067783">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should warn and fail for non-md file imports" time="0.0009874">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle circular imports" time="0.0006037">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle file not found errors" time="0.0007537">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should respect max depth limit" time="0.0008403">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle nested imports recursively" time="0.0006607">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle absolute paths in imports" time="0.0004654">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle multiple imports in same content" time="0.0006027">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should reject URLs" time="0.0004661">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should allow paths within allowed directories" time="0.0005556">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should reject paths outside allowed directories" time="0.000483">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle multiple allowed directories" time="0.0004899">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle relative paths correctly" time="0.0005205">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle absolute paths correctly" time="0.0004725">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/nextSpeakerChecker.test.ts" timestamp="2025-07-31T16:52:10.508Z" hostname="Involvex" tests="10" failures="0" errors="0" skipped="0" time="0.0731061">
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if history is empty" time="0.0084436">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if the last speaker was the user" time="0.0044441">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;model&apos; } when model intends to continue" time="0.0076106">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;user&apos; } when model asks a question" time="0.0050246">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;user&apos; } when model makes a statement" time="0.004409">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson throws an error" time="0.004439">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns invalid JSON (missing next_speaker)" time="0.0105875">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns a non-string next_speaker" time="0.0040081">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns an invalid next_speaker string value" time="0.0114854">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should call generateJson with DEFAULT_GEMINI_FLASH_MODEL" time="0.0097393">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/partUtils.test.ts" timestamp="2025-07-31T16:52:10.510Z" hostname="Involvex" tests="23" failures="0" errors="0" skipped="0" time="0.0126303">
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (default behavior) &gt; should return empty string for undefined or null" time="0.0026861">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (default behavior) &gt; should return string input unchanged" time="0.0002268">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (default behavior) &gt; should concatenate strings from an array" time="0.0001799">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (default behavior) &gt; should return text property when provided a text part" time="0.0002243">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (default behavior) &gt; should return empty string for non-text parts" time="0.0002207">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return empty string for undefined or null" time="0.0001995">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return string input unchanged" time="0.0001428">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should join parts if the value is an array" time="0.0001568">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return the text property if the part is an object with text" time="0.000164">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for videoMetadata part" time="0.0001482">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for thought part" time="0.0001502">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for codeExecutionResult part" time="0.000148">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for executableCode part" time="0.0003731">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for fileData part" time="0.0001978">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for functionCall part" time="0.0001945">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for functionResponse part" time="0.0003049">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for inlineData part" time="0.0001851">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return an empty string for an unknown part type" time="0.0001515">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should handle complex nested arrays with various part types" time="0.0001775">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; getResponseText &gt; should return null when no candidates exist" time="0.0004304">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; getResponseText &gt; should return concatenated text from first candidate" time="0.0027323">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; getResponseText &gt; should ignore parts without text" time="0.0002398">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; getResponseText &gt; should return null when candidate has no parts" time="0.0002778">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/retry.test.ts" timestamp="2025-07-31T16:52:10.515Z" hostname="Involvex" tests="13" failures="0" errors="0" skipped="0" time="0.0590988">
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should return the result on the first attempt if successful" time="0.0077347">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should retry and succeed if failures are within maxAttempts" time="0.0149116">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:22:32
    at mockCall (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///D:/repos/gemini-cli/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\retry.ts:96:20[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:61:21
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:22:32
    at mockCall (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///D:/repos/gemini-cli/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\retry.ts:96:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should throw an error if all attempts fail" time="0.005723">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:22:32
    at mockCall (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///D:/repos/gemini-cli/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\retry.ts:96:20[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:77:21
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:22:32
    at mockCall (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///D:/repos/gemini-cli/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\retry.ts:96:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should not retry if shouldRetry returns false" time="0.0012079">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should use default shouldRetry if not provided, retrying on 429" time="0.0012166">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should use default shouldRetry if not provided, not retrying on 400" time="0.0008286">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should respect maxDelayMs" time="0.0036928">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:22:32
    at mockCall (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///D:/repos/gemini-cli/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\retry.ts:96:20[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:159:21
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:22:32
    at mockCall (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///D:/repos/gemini-cli/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\retry.ts:96:20[90m)[39m {
  status: [33m500[39m
}

Attempt 3 failed with status 500. Retrying with backoff... Error: Simulated error attempt 3
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:22:32
    at mockCall (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///D:/repos/gemini-cli/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\retry.ts:96:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should handle jitter correctly, ensuring varied delays" time="0.0041957">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:22:32
    at mockCall (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///D:/repos/gemini-cli/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\retry.ts:96:20[90m)[39m
    at runRetry [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:188:7[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:195:22
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;) {
  status: [33m500[39m
}

Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:22:32
    at mockCall (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///D:/repos/gemini-cli/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\retry.ts:96:20[90m)[39m
    at runRetry [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:188:7[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:209:22
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should trigger fallback for OAuth personal users after persistent 429 errors" time="0.0030966">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should NOT trigger fallback for API key users" time="0.0018441">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should reset attempt counter and continue after successful fallback" time="0.0011915">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should continue with original error if fallback is rejected" time="0.0038019">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should handle mixed error types (only count consecutive 429s)" time="0.0071">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Server error
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:373:36
    at mockCall (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///D:/repos/gemini-cli/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(D:\repos\gemini-cli\packages\core\[39msrc\utils\retry.ts:96:20[90m)[39m
    at [90mD:\repos\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:384:23
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///D:/repos/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/safeJsonStringify.test.ts" timestamp="2025-07-31T16:52:10.518Z" hostname="Involvex" tests="8" failures="0" errors="0" skipped="0" time="0.0065801">
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should stringify normal objects without issues" time="0.0025333">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle circular references by replacing them with [Circular]" time="0.0002528">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle complex circular structures like HttpsProxyAgent" time="0.0004421">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should respect the space parameter for formatting" time="0.0001828">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle circular references with formatting" time="0.0001834">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle arrays with circular references" time="0.0001923">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle null and undefined values" time="0.0003665">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle primitive values" time="0.0002735">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/shell-utils.test.ts" timestamp="2025-07-31T16:52:10.520Z" hostname="Involvex" tests="33" failures="0" errors="0" skipped="0" time="0.0178612">
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should allow a command if no restrictions are provided" time="0.0034683">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should allow a command if it is in the global allowlist" time="0.0004556">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should block a command if it is not in a strict global allowlist" time="0.000303">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should block a command if it is in the blocked list" time="0.0002961">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should prioritize the blocklist over the allowlist" time="0.0002914">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should allow any command when a wildcard is in coreTools" time="0.0002598">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should block any command when a wildcard is in excludeTools" time="0.0002803">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should block a command on the blocklist even with a wildcard allow" time="0.0003032">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should allow a chained command if all parts are on the global allowlist" time="0.0002482">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should block a chained command if any part is blocked" time="0.0003055">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; command substitution &gt; should block command substitution using `$(...)`" time="0.0004147">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; command substitution &gt; should block command substitution using `&lt;(...)`" time="0.0002171">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; command substitution &gt; should block command substitution using backticks" time="0.0002291">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; command substitution &gt; should allow substitution-like patterns inside single quotes" time="0.0006874">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Allow&quot; mode (no sessionAllowlist) &gt; should return a detailed success object for an allowed command" time="0.0012692">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Allow&quot; mode (no sessionAllowlist) &gt; should return a detailed failure object for a blocked command" time="0.0003191">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Allow&quot; mode (no sessionAllowlist) &gt; should return a detailed failure object for a command not on a strict allowlist" time="0.000273">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should allow a command on the sessionAllowlist" time="0.0002402">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should block a command not on the sessionAllowlist or global allowlist" time="0.0002949">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should allow a command on the global allowlist even if not on the session allowlist" time="0.0002545">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should allow a chained command if parts are on different allowlists" time="0.000244">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should block a command on the sessionAllowlist if it is also globally blocked" time="0.0003003">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should block a chained command if one part is not on any allowlist" time="0.0003199">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getCommandRoots &gt; should return a single command" time="0.0004042">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getCommandRoots &gt; should handle paths and return the binary name" time="0.0002702">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getCommandRoots &gt; should return an empty array for an empty string" time="0.0001755">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getCommandRoots &gt; should handle a mix of operators" time="0.0006283">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getCommandRoots &gt; should correctly parse a chained command with quotes" time="0.0001928">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="stripShellWrapper &gt; should strip sh -c with quotes" time="0.0002617">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="stripShellWrapper &gt; should strip bash -c with extra whitespace" time="0.0001852">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="stripShellWrapper &gt; should strip zsh -c without quotes" time="0.000142">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="stripShellWrapper &gt; should strip cmd.exe /c" time="0.0002201">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="stripShellWrapper &gt; should not strip anything if no wrapper is present" time="0.0001811">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/summarizer.test.ts" timestamp="2025-07-31T16:52:10.526Z" hostname="Involvex" tests="8" failures="0" errors="0" skipped="0" time="0.0510888">
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if it is shorter than maxLength" time="0.0091405">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if it is empty" time="0.0042967">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should call generateContent if text is longer than maxLength" time="0.0057142">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if generateContent throws an error" time="0.0083793">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should construct the correct prompt for summarization" time="0.0044767">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; llmSummarizer &gt; should summarize tool output using summarizeToolOutput" time="0.0052245">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; llmSummarizer &gt; should handle different llmContent types" time="0.0052555">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; defaultSummarizer &gt; should stringify the llmContent" time="0.0060131">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/systemEncoding.test.ts" timestamp="2025-07-31T16:52:10.528Z" hostname="Involvex" tests="38" failures="0" errors="0" skipped="0" time="0.0412893">
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; windowsCodePageToEncoding &gt; should map common Windows code pages correctly" time="0.0067354">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; windowsCodePageToEncoding &gt; should return null for unmapped code pages and warn" time="0.0038782">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; windowsCodePageToEncoding &gt; should handle all Windows-specific code pages" time="0.0009618">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; detectEncodingFromBuffer &gt; should detect encoding using chardet successfully" time="0.001999">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; detectEncodingFromBuffer &gt; should handle chardet returning mixed case encoding" time="0.0004553">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; detectEncodingFromBuffer &gt; should return null when chardet fails" time="0.0020373">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; detectEncodingFromBuffer &gt; should return null when chardet returns null" time="0.0005779">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; detectEncodingFromBuffer &gt; should return null when chardet returns non-string" time="0.0005684">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should parse Windows chcp output correctly" time="0.0011088">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should handle different chcp output formats" time="0.0003864">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should handle chcp output with extra whitespace" time="0.0002953">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should return null when chcp command fails" time="0.0008883">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should return null when chcp output cannot be parsed" time="0.0004478">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should return null when code page is not a number" time="0.0003918">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should return null when code page maps to null" time="0.0004397">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should parse locale from LC_ALL environment variable" time="0.0004711">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should parse locale from LC_CTYPE when LC_ALL is not set" time="0.0004226">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should parse locale from LANG when LC_ALL and LC_CTYPE are not set" time="0.0003322">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should handle locale charmap command when environment variables are empty" time="0.0007302">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should handle locale charmap with mixed case" time="0.0004903">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should return null when locale charmap fails" time="0.0004961">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should handle locale without encoding (no dot)" time="0.0004101">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should handle empty locale environment variables" time="0.0005481">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should return locale as-is when locale format has no dot" time="0.0003908">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should prioritize LC_ALL over other environment variables" time="0.0004341">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should prioritize LC_CTYPE over LANG" time="0.0003974">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should use cached system encoding on subsequent calls" time="0.0005831">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should fall back to buffer detection when system encoding fails" time="0.0007552">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should fall back to utf-8 when both system and buffer detection fail" time="0.0005164">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should not cache buffer detection results" time="0.0007094">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should handle Windows system encoding" time="0.0008488">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should cache null system encoding result" time="0.0025116">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Cross-platform behavior &gt; should work correctly on macOS" time="0.000597">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Cross-platform behavior &gt; should work correctly on other Unix-like systems" time="0.0005888">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Cross-platform behavior &gt; should handle unknown platforms as Unix-like" time="0.0004904">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Edge cases and error handling &gt; should handle empty buffer gracefully" time="0.0013033">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Edge cases and error handling &gt; should handle very large buffers" time="0.0014336">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Edge cases and error handling &gt; should handle Unicode content" time="0.0010402">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/user_account.test.ts" timestamp="2025-07-31T16:52:10.536Z" hostname="Involvex" tests="16" failures="0" errors="0" skipped="0" time="0.1294518">
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; cacheGoogleAccount &gt; should create directory and write initial account file" time="0.0124905">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; cacheGoogleAccount &gt; should update active account and move previous to old" time="0.0102007">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; cacheGoogleAccount &gt; should not add a duplicate to the old list" time="0.0211655">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; cacheGoogleAccount &gt; should handle corrupted JSON by starting fresh" time="0.0127321">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getCachedGoogleAccount &gt; should return the active account if file exists and is valid" time="0.004125">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getCachedGoogleAccount &gt; should return null if file does not exist" time="0.0010709">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getCachedGoogleAccount &gt; should return null if file is empty" time="0.002671">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getCachedGoogleAccount &gt; should return null and log if file is corrupted" time="0.0141422">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; clearCachedGoogleAccount &gt; should set active to null and move it to old" time="0.0143116">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; clearCachedGoogleAccount &gt; should handle empty file gracefully" time="0.0163146">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file does not exist" time="0.0010883">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file is empty" time="0.0031427">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file is corrupted" time="0.0037144">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should return 1 if there is only an active account" time="0.0028592">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should correctly count old accounts when active is null" time="0.0032758">
        </testcase>
        <testcase classname="src/utils/user_account.test.ts" name="user_account &gt; getLifetimeGoogleAccounts &gt; should correctly count both active and old accounts" time="0.0030067">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/user_id.test.ts" timestamp="2025-07-31T16:52:10.540Z" hostname="Involvex" tests="1" failures="0" errors="0" skipped="0" time="0.0058226">
        <testcase classname="src/utils/user_id.test.ts" name="user_id &gt; getInstallationId &gt; should return a valid UUID format string" time="0.003867">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/workspaceContext.test.ts" timestamp="2025-07-31T16:52:10.540Z" hostname="Involvex" tests="19" failures="0" errors="0" skipped="0" time="0.0243333">
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext &gt; initialization &gt; should initialize with a single directory (cwd)" time="0.0061828">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext &gt; initialization &gt; should validate and resolve directories to absolute paths" time="0.00177">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext &gt; initialization &gt; should reject non-existent directories" time="0.0017741">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext &gt; initialization &gt; should handle empty initialization" time="0.0007433">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext &gt; adding directories &gt; should add valid directories" time="0.00088">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext &gt; adding directories &gt; should resolve relative paths to absolute" time="0.0005401">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext &gt; adding directories &gt; should reject non-existent directories" time="0.0007717">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext &gt; adding directories &gt; should prevent duplicate directories" time="0.0004921">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext &gt; adding directories &gt; should handle symbolic links correctly" time="0.0005234">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext &gt; path validation &gt; should accept paths within workspace directories" time="0.0009157">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext &gt; path validation &gt; should reject paths outside workspace" time="0.0005362">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext &gt; path validation &gt; should resolve symbolic links before validation" time="0.0006684">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext &gt; path validation &gt; should handle nested directories correctly" time="0.0007222">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext &gt; path validation &gt; should handle edge cases (root, parent references)" time="0.0005675">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext &gt; path validation &gt; should handle non-existent paths correctly" time="0.0005136">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext &gt; getDirectories &gt; should return a copy of directories array" time="0.0018385">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext &gt; symbolic link security &gt; should follow symlinks but validate resolved path" time="0.0006157">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext &gt; symbolic link security &gt; should prevent sandbox escape via symlinks" time="0.0006968">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext &gt; symbolic link security &gt; should handle circular symlinks" time="0.0004485">
        </testcase>
    </testsuite>
</testsuites>
